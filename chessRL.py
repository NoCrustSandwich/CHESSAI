import gym
from gym import spaces
import chess
import chess.svg
from PIL import Image
import numpy as np
import cairo




# Class for the chess board enviorment for the RL
class ChessEnv(gym.Env):
    def __init__(self):


        # Scroing will be rounded up in the end

        # Player / Opponent board weightings
        # _ = 0, 
        # p1 = 1,   |     op1 = -1, 
        # p2 = 2,   |     op2 = -2, 
        # p3 = 3,   |     op3 = -3, 
        # p4 = 4,   |     op4 = -4, 
        # p5 = 5,   |     op5 = -5, 
        # p6 = 6,   |     op6 = -6, 
        # p7 = 7,   |     op7 = -7, 
        # p8 = 8,   |     op8 = -8,
        # n1 = 9,   |     on1 = -9,
        # n2 = 10,  |     on2 = -10,
        # b1 = 11,  |     ob1 = -11,
        # b2 = 12,  |     ob2 = -12,
        # r1 = 13,  |     or1 = -13,
        # r2 = 14,  |     or2 = -14,
        # q = 15,   |     oq = -15,
        # k = 16,   |     ok = -16,


        # Dictionary to translate board ints to string representations
        int_to_piece ={
            0:"_", 
            1:"p1", 2:"p2", 3:"p3", 4:"p4", 5:"p5", 6:"p6", 7:"p7", 8:"p8",
            -1:"op1", -2:"op2", -3:"op3", -4:"op4", -5:"op5", -6:"op6", -7:"op7", -8:"op8",
            9:"n1", 10:"n2",
            -9:"on1", -10:"on2",
            11:"b1", 12:"b2",
            -11:"ob1", -12:"ob2",
            13:"r1", 14:"r2",
            -13:"or1", -14:"or2",
            15:"q",
            -15:"oq",  
            16:"k",
            -16:"ok",

        }

        # Dictionary to translate board string to integer representations
        piece_to_int = {
        "_": 0,
        "p1": 1, "p2": 2, "p3": 3, "p4": 4, "p5": 5, "p6": 6, "p7": 7, "p8": 8,
        "op1": -1, "op2": -2, "op3": -3, "op4": -4, "op5": -5, "op6": -6, "op7": -7, "op8": -8,
        "n1": 9, "n2": 10,
        "on1": -9, "on2": -10,
        "b1": 11, "b2": 12,
        "ob1": -11, "ob2": -12,
        "r1": 13, "r2": 14,
        "or1": -13, "or2": -14,
        "q": 15,
        "oq": -15,
        "k": 16,
        "ok": -16,
        }



           



        super(ChessEnv, self).__init__()

        self.board = [  [-13,-9,-11,-15,-16,-12,-10,-14],
                        [-1,-2,-3,-4,-5,-6,-7,-8],
                        [0,0,0,0,0,0,0,0],
                        [0,0,0,0,0,0,0,0],
                        [0,0,0,0,0,0,0,0],
                        [0,0,0,0,0,0,0,0],
                        [1,2,3,4,5,6,7,8],
                        [13,9,11,15,16,12,10,14] ]
        
        # o = opponent, ie. or1 = opponent rook 1
        self.board = [["or1","on1","ob1","oq","ok","ob2","on2","or2"],
                ["op1","op2","op3","op4","op5","op6","op7","op8"],
                ["_","_","_","_","_","_","_","_"],
                ["_","_","_","_","_","_","_","_"],
                ["_","_","_","_","_","_","_","_"],
                ["_","_","_","_","_","_","_","_"],
                ["p1","p2","p3","p4","p5","p6","p7","p8"],
                ["r1","n1","b1","q","k","b2","n2","r2"]]
        
        # Tuple of 226 possible actions to be taken: ("piece", (Horizontal index change, Vertical index change))
        self.action_space    =   [   

                ("p1", (0, 1)),
                ("p1", (-1, 1)),
                ("p1", (1, 1)),
                ("p1", (0, 2)),

                ("p2", (0, 1)),
                ("p2", (-1, 1)),
                ("p2", (1, 1)),
                ("p2", (0, 2)),

                ("p3", (0, 1)),
                ("p3", (-1, 1)),
                ("p3", (1, 1)),
                ("p3", (0, 2)),

                ("p4", (0, 1)),
                ("p4", (-1, 1)),
                ("p4", (1, 1)),
                ("p4", (0, 2)),


                ("p5", (0, 1)),
                ("p5", (-1, 1)),
                ("p5", (1, 1)),
                ("p5", (0, 2)),

                ("p6", (0, 1)),
                ("p6", (-1, 1)),
                ("p6", (1, 1)),
                ("p6", (0, 2)),

                ("p7", (0, 1)),
                ("p7", (-1, 1)),
                ("p7", (1, 1)),
                ("p7", (0, 2)),

                ("p8", (0, 1)),
                ("p8", (-1, 1)),
                ("p8", (1, 1)),
                ("p8", (0, 2)),
                

                ("k", (0, 1)),
                ("k", (-1, 1)),
                ("k", (1, 1)),
                ("k", (-1, 0)),
                ("k", (-2, 0)),
                ("k", (1, 0)),
                ("k", (2, 0)),
                ("k", (0, -1)),
                ("k", (-1, -1)),
                ("k", (1, -1)),
                

                ("b1", (1, 1)),
                ("b1", (2, 2)),
                ("b1", (3, 3)),
                ("b1", (4, 4)),
                ("b1", (5, 5)),
                ("b1", (6, 6)),
                ("b1", (7, 7)),
                ("b1", (-1, -1)),
                ("b1", (-2, -2)),
                ("b1", (-3, -3)),
                ("b1", (-4, -4)),
                ("b1", (-5, -5)),
                ("b1", (-6, -6)),
                ("b1", (-7, -7)),
                ("b1", (-1, 1)),
                ("b1", (-2, 2)),
                ("b1", (-3, 3)),
                ("b1", (-4, 4)),
                ("b1", (-5, 5)),
                ("b1", (-6, 6)),
                ("b1", (-7, 7)),
                ("b1", (1, -1)),
                ("b1", (2, -2)),
                ("b1", (3, -3)),
                ("b1", (4, -4)),
                ("b1", (5, -5)),
                ("b1", (6, -6)),
                ("b1", (7, -7)),

                
                ("b2", (1, 1)),
                ("b2", (2, 2)),
                ("b2", (3, 3)),
                ("b2", (4, 4)),
                ("b2", (5, 5)),
                ("b2", (6, 6)),
                ("b2", (7, 7)),
                ("b2", (-1, -1)),
                ("b2", (-2, -2)),
                ("b2", (-3, -3)),
                ("b2", (-4, -4)),
                ("b2", (-5, -5)),
                ("b2", (-6, -6)),
                ("b2", (-7, -7)),
                ("b2", (-1, 1)),
                ("b2", (-2, 2)),
                ("b2", (-3, 3)),
                ("b2", (-4, 4)),
                ("b2", (-5, 5)),
                ("b2", (-6, 6)),
                ("b2", (-7, 7)),
                ("b2", (1, -1)),
                ("b2", (2, -2)),
                ("b2", (3, -3)),
                ("b2", (4, -4)),
                ("b2", (5, -5)),
                ("b2", (6, -6)),
                ("b2", (7, -7)),


                ("r1", (0, 1)),
                ("r1", (0, 2)),
                ("r1", (0, 3)),
                ("r1", (0, 4)),
                ("r1", (0, 5)),
                ("r1", (0, 6)),
                ("r1", (0, 7)),
                ("r1", (0, -1)),
                ("r1", (0, -2)),
                ("r1", (0, -3)),
                ("r1", (0, -4)),
                ("r1", (0, -5)),
                ("r1", (0, -6)),
                ("r1", (0, -7)),
                ("r1", (1, 0)),
                ("r1", (2, 0)),
                ("r1", (3, 0)),
                ("r1", (4, 0)),
                ("r1", (5, 0)),
                ("r1", (6, 0)),
                ("r1", (7, 0)),
                ("r1", (-1, 0)),
                ("r1", (-2, 0)),
                ("r1", (-3, 0)),
                ("r1", (-4, 0)),
                ("r1", (-5, 0)),
                ("r1", (-6, 0)),
                ("r1", (-7, 0)),


                ("r2", (0, 1)),
                ("r2", (0, 2)),
                ("r2", (0, 3)),
                ("r2", (0, 4)),
                ("r2", (0, 5)),
                ("r2", (0, 6)),
                ("r2", (0, 7)),
                ("r2", (0, -1)),
                ("r2", (0, -2)),
                ("r2", (0, -3)),
                ("r2", (0, -4)),
                ("r2", (0, -5)),
                ("r2", (0, -6)),
                ("r2", (0, -7)),
                ("r2", (1, 0)),
                ("r2", (2, 0)),
                ("r2", (3, 0)),
                ("r2", (4, 0)),
                ("r2", (5, 0)),
                ("r2", (6, 0)),
                ("r2", (7, 0)),
                ("r2", (-1, 0)),
                ("r2", (-2, 0)),
                ("r2", (-3, 0)),
                ("r2", (-4, 0)),
                ("r2", (-5, 0)),
                ("r2", (-6, 0)),
                ("r2", (-7, 0)),

                

                ("n1", (1, -2)),
                ("n1", (2, -1)),
                ("n1", (1, 2)),
                ("n1", (2, 1)),
                ("n1", (-1, -2)),
                ("n1", (-2, -1)),
                ("n1", (-1, 2)),
                ("n1", (-2, 1)),



                ("n2", (1, -2)),
                ("n2", (2, -1)),
                ("n2", (1, 2)),
                ("n2", (2, 1)),
                ("n2", (-1, -2)),
                ("n2", (-2, -1)),
                ("n2", (-1, 2)),
                ("n2", (-2, 1)),

                
                
                ("q", (1, 1)),
                ("q", (2, 2)),
                ("q", (3, 3)),
                ("q", (4, 4)),
                ("q", (5, 5)),
                ("q", (6, 6)),
                ("q", (7, 7)),
                ("q", (-1, -1)),
                ("q", (-2, -2)),
                ("q", (-3, -3)),
                ("q", (-4, -4)),
                ("q", (-5, -5)),
                ("q", (-6, -6)),
                ("q", (-7, -7)),
                ("q", (-1, 1)),
                ("q", (-2, 2)),
                ("q", (-3, 3)),
                ("q", (-4, 4)),
                ("q", (-5, 5)),
                ("q", (-6, 6)),
                ("q", (-7, 7)),
                ("q", (1, -1)),
                ("q", (2, -2)),
                ("q", (3, -3)),
                ("q", (4, -4)),
                ("q", (5, -5)),
                ("q", (6, -6)),
                ("q", (7, -7)),
                ("q", (0, 1)),
                ("q", (0, 2)),
                ("q", (0, 3)),
                ("q", (0, 4)),
                ("q", (0, 5)),
                ("q", (0, 6)),
                ("q", (0, 7)),
                ("q", (0, -1)),
                ("q", (0, -2)),
                ("q", (0, -3)),
                ("q", (0, -4)),
                ("q", (0, -5)),
                ("q", (0, -6)),
                ("q", (0, -7)),
                ("q", (1, 0)),
                ("q", (2, 0)),
                ("q", (3, 0)),
                ("q", (4, 0)),
                ("q", (5, 0)),
                ("q", (6, 0)),
                ("q", (7, 0)),
                ("q", (-1, 0)),
                ("q", (-2, 0)),
                ("q", (-3, 0)),
                ("q", (-4, 0)),
                ("q", (-5, 0)),
                ("q", (-6, 0)),
                ("q", (-7, 0)),
        ]

        self.observation_space = spaces.Box(low=-6, high=6, shape=(8, 8), dtype=int)

    


    def reset(self):
        # Reset the board to its initial state
        self.board = [["or1","on1","ob1","oq","ok","ob2","on2","or2"],
                ["op1","op2","op3","op4","op5","op6","op7","op8"],
                ["_","_","_","_","_","_","_","_"],
                ["_","_","_","_","_","_","_","_"],
                ["_","_","_","_","_","_","_","_"],
                ["_","_","_","_","_","_","_","_"],
                ["p1","p2","p3","p4","p5","p6","p7","p8"],
                ["r1","n1","b1","q","k","b2","n2","r2"]]
        return np.array(self.board)
    


    def step(self, action):
            

            # Implement the logic for executing a move based on the action
            # Update the board and calculate the reward
            # ...

            


            # Placeholder return values
            observation = np.array(self.board)
            reward = 0.0
            done = False
            info = {}

            return observation, reward, done, info



    

 

   





