# Library Imports
import copy
import chessANN
import numpy as np
from typing import List


###############################################################################################################################################################
# Reinforcment Learning Enviorment - Version 4.0 (25/11/2023)
###############################################################################################################################################################

class RLE():
    """
    RLE - Reinforcement Learning Environment for Chess

    This class represents a simplified chess environment for the reinforcement learning of the Chess Neural Network Engine.

    Attributes:
        - neuralNetwork (object): Instance of the neuralNetwork.
        - move_history_cn (List[str]): List of move history in Coordinates Notation.
        - en_passant_tile (List[int]): Coordinates of the available en passant tile.
        - castling_available_r1_white (bool): Availability of castling with the left rook of white player.
        - castling_available_r2_white (bool): Availability of castling with the right rook of white player.
        - castling_available_r1_black (bool): Availability of castling with the left rook of black player.
        - castling_available_r2_black (bool): Availability of castling with the right rook of black player.
        - number_of_next_knight_white (int): Number of the next promoted knight for white player.
        - number_of_next_knight_black (int): Number of the next promoted knight for black player.
        - number_of_next_bishop_white (int): Number of the next promoted bishop for white player.
        - number_of_next_bishop_black (int): Number of the next promoted bishop for black player.
        - number_of_next_rook_white (int): Number of the next promoted rook for white player.
        - number_of_next_rook_black (int): Number of the next promoted rook for black player.
        - number_of_next_queen_white (int): Number of the next promoted queen for white player.
        - number_of_next_queen_black (int): Number of the next promoted queen for black player.
        - board_state (List[List[str]]): 2D list representing the chess board.
        - TILE_INDICES_TO_COORDINATES_WHITE_PERSPECTIVE (Dict): Mapping of tile indices to coordinates for white player.
        - TILE_INDICES_TO_COORDINATES_BLACK_PERSPECTIVE (Dict): Mapping of tile indices to coordinates for black player.
        - PIECE_LABELS_OPPONENTS_PERSPECTIVE (Dict): Mapping of piece labels to their opponents' perspective.
        - PIECE_LABELS_INTEGER_TO_STRING (Dict): Mapping of piece labels (integers) to their string representations.
        - PIECE_LABELS_STRING_TO_INTEGER (Dict): Mapping of piece labels (strings) to their integer representations.
        - POSSIBLE_MOVES (List[Tuple]): List of possible moves that can be taken by the Agent.

    Methods:
        - __init__(self): Initialize the RLE object with default values for game state variables.
        - reset_game_state(self): Resets the game state to its initial configuration.
        - change_board_perspective(self, board) -> List[List[str]]: Changes the perspective of the chessboard to represent the opponent's view.
        - change_perspective(self): 
        - preprosess_input(self, board) -> np.ndarray: Translates a chessboard represented as a list of strings to a NumPy array with piece labels 
                                                       converted to their integer representations. The resulting array is formatted to be fed into 
                                                       a neural network as input.
        - train_neural_network(self, board, reward, q_values, action_index): Trains the artificial neural network (ANN) based on the provided reward, updating the Q-values 
                                                                             for the specified action index in the output layer.
        - get_action_piece_tiles(self, board, action): Returns information about the tiles involved in a specific action on the chessboard.
        - king_in_check(self, board) -> bool: Determines if the current position of the king on the chessboard is under check.
        - opponent_king_in_check(self, board) -> bool: Determines if the current position of the opponent king on the chessboard is under check.
        - tile_indices_to_coordinates(self, source_tile, target_tile): Convert chess tile indices to coordinates based on the current perspective.
        - invalid_action(self, action_info, q_values, action_index): Handles the case where an invalid action is taken by the agent.
        - valid_action(self, action_info, q_values, action_index): Handles the case where an valid action is taken by the agent.
        - attempt_action(self, action): Attempts to take the given action, and trains the artificial neural network (ANN) based on the utility of the action,
                                                     based on the game state, and the utility is represented by the action_reward.
    """

    def __init__(self):
        """
        Initialize the RLE object with default values for game state variables.
        """
        self.neuralNetwork = chessANN.neuralNetwork()

        self.move_history_cn = [] # CN == Coordinates Notation (ie. Source Tile -> Target Tile) 
        self.perspective = "w"

        self.en_passant_tile = None

        self.castling_available_r1_white = True
        self.castling_available_r2_white = True
        self.castling_available_r1_black = True
        self.castling_available_r2_black = True

        self.number_of_next_knight_white = 3
        self.number_of_next_knight_black = 3
        self.number_of_next_bishop_white = 3
        self.number_of_next_bishop_black = 3
        self.number_of_next_rook_white = 3
        self.number_of_next_rook_black = 3
        self.number_of_next_queen_white = 2
        self.number_of_next_queen_black = 2

        self.board_state = [["or2","on2","ob2","oq1","ok","ob1","on1","or1"],
                ["op8","op7","op6","op5","op4","op3","op2","op1"],
                ["_","_","_","_","_","_","_","_"],
                ["_","_","_","_","_","_","_","_"],
                ["_","_","_","_","_","_","_","_"],
                ["_","_","_","_","_","_","_","_"],
                ["p1","p2","p3","p4","p5","p6","p7","p8"],
                ["r1","n1","b1","q1","k","b2","n2","r2"]]

        self.COORDINATES_TO_TILE_INDICES_WHITE_PERSPECTIVE = {
            "a8":[0,0], "b8":[0,1], "c8":[0,2], "d8":[0,3], "e8":[0,4], "f8":[0,5], "g8":[0,6], "h8":[0,7],
            "a7":[1,0], "b7":[1,1], "c7":[1,2], "d7":[1,3], "e7":[1,4], "f7":[1,5], "g7":[1,6], "h7":[1,7],
            "a6":[2,0], "b6":[2,1], "c6":[2,2], "d6":[2,3], "e6":[2,4], "f6":[2,5], "g6":[2,6], "h6":[2,7],
            "a5":[3,0], "b5":[3,1], "c5":[3,2], "d5":[3,3], "e5":[3,4], "f5":[3,5], "g5":[3,6], "h5":[3,7],
            "a4":[4,0], "b4":[4,1], "c4":[4,2], "d4":[4,3], "e4":[4,4], "f4":[4,5], "g4":[4,6], "h4":[4,7],
            "a3":[5,0], "b3":[5,1], "c3":[5,2], "d3":[5,3], "e3":[5,4], "f3":[5,5], "g3":[5,6], "h3":[5,7],
            "a2":[6,0], "b2":[6,1], "c2":[6,2], "d2":[6,3], "e2":[6,4], "f2":[6,5], "g2":[6,6], "h2":[6,7],
            "a1":[7,0], "b1":[7,1], "c1":[7,2], "d1":[7,3], "e1":[7,4], "f1":[7,5], "g1":[7,6], "h1":[7,7],
        }
        self.COORDINATES_TO_TILE_INDICES_BLACK_PERSPECTIVE = {
            "h1":[0,0], "g1":[0,1], "f1":[0,2], "e1":[0,3], "d1":[0,4], "c1":[0,5], "b1":[0,6], "a1":[0,7],
            "h2":[1,0], "g2":[1,1], "f2":[1,2], "e2":[1,3], "d2":[1,4], "c2":[1,5], "b2":[1,6], "a2":[1,7],
            "h3":[2,0], "g3":[2,1], "f3":[2,2], "e3":[2,3], "d3":[2,4], "c3":[2,5], "b3":[2,6], "a3":[2,7],
            "h4":[3,0], "g4":[3,1], "f4":[3,2], "e4":[3,3], "d4":[3,4], "c4":[3,5], "b4":[3,6], "a4":[3,7],
            "h5":[4,0], "g5":[4,1], "f5":[4,2], "e5":[4,3], "d5":[4,4], "c5":[4,5], "b5":[4,6], "a5":[4,7],
            "h6":[5,0], "g6":[5,1], "f6":[5,2], "e6":[5,3], "d6":[5,4], "c6":[5,5], "b6":[5,6], "a6":[5,7],
            "h7":[6,0], "g7":[6,1], "f7":[6,2], "e7":[6,3], "d7":[6,4], "c7":[6,5], "b7":[6,6], "a7":[6,7],
            "h8":[7,0], "g8":[7,1], "f8":[7,2], "e8":[7,3], "d8":[7,4], "c8":[7,5], "b8":[7,6], "a8":[7,7],
        }
        self.TILE_INDICES_TO_COORDINATES_WHITE_PERSPECTIVE = {
            (0,0):"a8", (0,1):"b8", (0,2):"c8", (0,3):"d8", (0,4):"e8", (0,5):"f8", (0,6):"g8", (0,7):"h8",
            (1,0):"a7", (1,1):"b7", (1,2):"c7", (1,3):"d7", (1,4):"e7", (1,5):"f7", (1,6):"g7", (1,7):"h7",
            (2,0):"a6", (2,1):"b6", (2,2):"c6", (2,3):"d6", (2,4):"e6", (2,5):"f6", (2,6):"g6", (2,7):"h6",
            (3,0):"a5", (3,1):"b5", (3,2):"c5", (3,3):"d5", (3,4):"e5", (3,5):"f5", (3,6):"g5", (3,7):"h5",
            (4,0):"a4", (4,1):"b4", (4,2):"c4", (4,3):"d4", (4,4):"e4", (4,5):"f4", (4,6):"g4", (4,7):"h4",
            (5,0):"a3", (5,1):"b3", (5,2):"c3", (5,3):"d3", (5,4):"e3", (5,5):"f3", (5,6):"g3", (5,7):"h3",
            (6,0):"a2", (6,1):"b2", (6,2):"c2", (6,3):"d2", (6,4):"e2", (6,5):"f2", (6,6):"g2", (6,7):"h2",
            (7,0):"a1", (7,1):"b1", (7,2):"c1", (7,3):"d1", (7,4):"e1", (7,5):"f1", (7,6):"g1", (7,7):"h1",
        }
        self.TILE_INDICES_TO_COORDINATES_BLACK_PERSPECTIVE = {
            (0,0):"h1", (0,1):"g1", (0,2):"f1", (0,3):"e1", (0,4):"d1", (0,5):"c1", (0,6):"b1", (0,7):"a1",
            (1,0):"h2", (1,1):"g2", (1,2):"f2", (1,3):"e2", (1,4):"d2", (1,5):"c2", (1,6):"b2", (1,7):"a2",
            (2,0):"h3", (2,1):"g3", (2,2):"f3", (2,3):"e3", (2,4):"d3", (2,5):"c3", (2,6):"b3", (2,7):"a3",
            (3,0):"h4", (3,1):"g4", (3,2):"f4", (3,3):"e4", (3,4):"d4", (3,5):"c4", (3,6):"b4", (3,7):"a4",
            (4,0):"h5", (4,1):"g5", (4,2):"f5", (4,3):"e5", (4,4):"d5", (4,5):"c5", (4,6):"b5", (4,7):"a5",
            (5,0):"h6", (5,1):"g6", (5,2):"f6", (5,3):"e6", (5,4):"d6", (5,5):"c6", (5,6):"b6", (5,7):"a6",
            (6,0):"h7", (6,1):"g7", (6,2):"f7", (6,3):"e7", (6,4):"d7", (6,5):"c7", (6,6):"b7", (6,7):"a7",
            (7,0):"h8", (7,1):"g8", (7,2):"f8", (7,3):"e8", (7,4):"d8", (7,5):"c8", (7,6):"b8", (7,7):"a8",
        }
        self.PIECE_LABELS_OPPONENTS_PERSPECTIVE = {
            "_":"_",
            "p1": "op1", "p2": "op2", "p3": "op3", "p4": "op4", "p5": "op5", "p6": "op6", "p7": "op7", "p8": "op8",
            "n1": "on1", "n2": "on2", "n3": "on3", "n4": "on4", "n5": "on5", "n6": "on6", "n7": "on7", "n8": "on8", "n9": "on9", "n10": "on10",
            "b1": "ob1", "b2": "ob2", "b3": "ob3", "b4": "ob4", "b5": "ob5", "b6": "ob6", "b7": "ob7", "b8": "ob8", "b9": "ob9", "b10": "ob10",
            "r1": "or1", "r2": "or2", "r3": "or3", "r4": "or4", "r5": "or5", "r6": "or6", "r7": "or7", "r8": "or8", "r9": "or9", "r10": "or10",
            "q1": "oq1", "q2": "oq2", "q3": "oq3", "q4": "oq4", "q5": "oq5", "q6": "oq6", "q7": "oq7", "q8": "oq8", "q9": "oq9",
            "k": "ok",
            "op1": "p1", "op2": "p2", "op3": "p3", "op4": "p4", "op5": "p5", "op6": "p6", "op7": "p7", "op8": "p8",
            "on1": "n1", "on2": "n2", "on3": "n3", "on4": "n4", "on5": "n5", "on6": "n6", "on7": "n7", "on8": "n8", "on9": "n9", "on10": "n10",
            "ob1": "b1", "ob2": "b2", "ob3": "b3", "ob4": "b4", "ob5": "b5", "ob6": "b6", "ob7": "b7", "ob8": "b8", "ob9": "b9", "ob10": "b10",
            "or1": "r1", "or2": "r2", "or3": "r3", "or4": "r4", "or5": "r5", "or6": "r6", "or7": "r7", "or8": "r8", "or9": "r9", "or10": "r10",
            "oq1": "q1", "oq2": "q2", "oq3": "q3", "oq4": "q4", "oq5": "q5", "oq6": "q6", "oq7": "q7", "oq8": "q8", "oq9": "q9",
            "ok": "k",
        }
        self.PIECE_LABELS_INTEGER_TO_STRING = {
            0:"_",

            1:"p1", 2:"p2", 3:"p3", 4:"p4", 5:"p5", 6:"p6", 7:"p7", 8:"p8",
            -1:"op1", -2:"op2", -3:"op3", -4:"op4", -5:"op5", -6:"op6", -7:"op7", -8:"op8",

            10:"n1", 11:"n2", 12:"n3", 13:"n4", 14:"n5", 15:"n6", 16:"n7", 17:"n8", 18:"n9", 19:"n10",
            -10:"on1", -11:"on2", -12:"on3", -13:"on4", -14:"on5", -15:"on6", -16:"on7", -17:"on8", -18:"on9", -19:"on10",

            20:"b1", 21:"b2", 22:"b3", 23:"b4", 24:"b5", 25:"b6", 26:"b7", 27:"b8", 28:"b9", 29:"b10",
            -20:"ob1", -21:"ob2", -22:"ob3", -23:"ob4", -24:"ob5", -25:"ob6", -26:"ob7", -27:"ob8", -28:"ob9", -29:"ob10",

            30:"r1", 31:"r2", 32:"r3", 33:"r4", 34:"r5", 35:"r6", 36:"r7", 37:"r8", 38:"r9", 39:"r10",
            -30:"or1", -31:"or2", -32:"or3", -33:"or4", -34:"or5", -35:"or6", -36:"or7", -37:"or8", -38:"or9", -39:"or10",

            40:"q1", 41:"q2", 42:"q3", 43:"q4", 44:"q5", 45:"q6", 46:"q7", 47:"q8", 48:"q9", 49:"q10",
            -40:"oq1", -41:"oq2", -42:"oq3", -43:"oq4", -44:"oq5", -45:"oq6", -46:"oq7", -47:"oq8", -48:"oq9", -49:"oq10",

            50:"k",
            -50:"ok",
        }
        self.PIECE_LABELS_STRING_TO_INTEGER = {
            "_":0, 

            "p1": 1, "p2": 2, "p3": 3, "p4": 4, "p5": 5, "p6": 6, "p7": 7, "p8": 8,
            "op1": -1, "op2": -2, "op3": -3, "op4": -4, "op5": -5, "op6": -6, "op7": -7, "op8": -8,

            "n1": 10, "n2": 11, "n3": 12, "n4": 13, "n5": 14, "n6": 15, "n7": 16, "n8": 17, "n9": 18, "n10": 19,
            "on1": -10, "on2": -11, "on3": -12, "on4": -13, "on5": -14, "on6": -15, "on7": -16, "on8": -17, "on9": -18, "on10": -19,

            "b1": 20, "b2": 21, "b3": 22, "b4": 23, "b5": 24, "b6": 25, "b7": 26, "b8": 27, "b9": 28, "b10": 29,
            "ob1": -20, "ob2": -21, "ob3": -22, "ob4": -23, "ob5": -24, "ob6": -25, "ob7": -26, "ob8": -27, "ob9": -28, "ob10": -29,

            "r1": 30, "r2": 31, "r3": 32, "r4": 33, "r5": 34, "r6": 35, "r7": 36, "r8": 37, "r9": 38, "r10": 39,
            "or1": -30, "or2": -31, "or3": -32, "or4": -33, "or5": -34, "or6": -35, "or7": -36, "or8": -37, "or9": -38, "or10": -39,

            "q1": 40, "q2": 41, "q3": 42, "q4": 43, "q5": 44, "q6": 45, "q7": 46, "q8": 47, "q9": 48,
            "oq1": -40, "oq2": -41, "oq3": -42, "oq4": -43, "oq5": -44, "oq6": -45, "oq7": -46, "oq8": -47, "oq9": -48,

            "k":50,
            "ok":-50,
        }
        self.POSSIBLE_MOVES = [   
                ("p1", (-1, 0)),
                ("p1", (-1, -1)),
                ("p1", (-1, 1)),
                ("p1", (-2, 0)),
                ("p1", (-1, 0), "q"),
                ("p1", (-1, -1), "q"),
                ("p1", (-1, 1), "q"),
                ("p1", (-1, 0), "r"),
                ("p1", (-1, -1), "r"),
                ("p1", (-1, 1), "r"),
                ("p1", (-1, 0), "b"),
                ("p1", (-1, -1), "b"),
                ("p1", (-1, 1), "b"),
                ("p1", (-1, 0), "n"),
                ("p1", (-1, -1), "n"),
                ("p1", (-1, 1), "n"),

                ("p2", (-1, 0)),
                ("p2", (-1, -1)),
                ("p2", (-1, 1)),
                ("p2", (-2, 0)),
                ("p2", (-1, 0), "q"),
                ("p2", (-1, -1), "q"),
                ("p2", (-1, 1), "q"),
                ("p2", (-1, 0), "r"),
                ("p2", (-1, -1), "r"),
                ("p2", (-1, 1), "r"),
                ("p2", (-1, 0), "b"),
                ("p2", (-1, -1), "b"),
                ("p2", (-1, 1), "b"),
                ("p2", (-1, 0), "n"),
                ("p2", (-1, -1), "n"),
                ("p2", (-1, 1), "n"),

                ("p3", (-1, 0)),
                ("p3", (-1, -1)),
                ("p3", (-1, 1)),
                ("p3", (-2, 0)),
                ("p3", (-1, 0), "q"),
                ("p3", (-1, -1), "q"),
                ("p3", (-1, 1), "q"),
                ("p3", (-1, 0), "r"),
                ("p3", (-1, -1), "r"),
                ("p3", (-1, 1), "r"),
                ("p3", (-1, 0), "b"),
                ("p3", (-1, -1), "b"),
                ("p3", (-1, 1), "b"),
                ("p3", (-1, 0), "n"),
                ("p3", (-1, -1), "n"),
                ("p3", (-1, 1), "n"),

                ("p4", (-1, 0)),
                ("p4", (-1, -1)),
                ("p4", (-1, 1)),
                ("p4", (-2, 0)),
                ("p4", (-1, 0), "q"),
                ("p4", (-1, -1), "q"),
                ("p4", (-1, 1), "q"),
                ("p4", (-1, 0), "r"),
                ("p4", (-1, -1), "r"),
                ("p4", (-1, 1), "r"),
                ("p4", (-1, 0), "b"),
                ("p4", (-1, -1), "b"),
                ("p4", (-1, 1), "b"),
                ("p4", (-1, 0), "n"),
                ("p4", (-1, -1), "n"),
                ("p4", (-1, 1), "n"),

                ("p5", (-1, 0)),
                ("p5", (-1, -1)),
                ("p5", (-1, 1)),
                ("p5", (-2, 0)),
                ("p5", (-1, 0), "q"),
                ("p5", (-1, -1), "q"),
                ("p5", (-1, 1), "q"),
                ("p5", (-1, 0), "r"),
                ("p5", (-1, -1), "r"),
                ("p5", (-1, 1), "r"),
                ("p5", (-1, 0), "b"),
                ("p5", (-1, -1), "b"),
                ("p5", (-1, 1), "b"),
                ("p5", (-1, 0), "n"),
                ("p5", (-1, -1), "n"),
                ("p5", (-1, 1), "n"),

                ("p6", (-1, 0)),
                ("p6", (-1, -1)),
                ("p6", (-1, 1)),
                ("p6", (-2, 0)),
                ("p6", (-1, 0), "q"),
                ("p6", (-1, -1), "q"),
                ("p6", (-1, 1), "q"),
                ("p6", (-1, 0), "r"),
                ("p6", (-1, -1), "r"),
                ("p6", (-1, 1), "r"),
                ("p6", (-1, 0), "b"),
                ("p6", (-1, -1), "b"),
                ("p6", (-1, 1), "b"),
                ("p6", (-1, 0), "n"),
                ("p6", (-1, -1), "n"),
                ("p6", (-1, 1), "n"),

                ("p7", (-1, 0)),
                ("p7", (-1, -1)),
                ("p7", (-1, 1)),
                ("p7", (-2, 0)),
                ("p7", (-1, 0), "q"),
                ("p7", (-1, -1), "q"),
                ("p7", (-1, 1), "q"),
                ("p7", (-1, 0), "r"),
                ("p7", (-1, -1), "r"),
                ("p7", (-1, 1), "r"),
                ("p7", (-1, 0), "b"),
                ("p7", (-1, -1), "b"),
                ("p7", (-1, 1), "b"),
                ("p7", (-1, 0), "n"),
                ("p7", (-1, -1), "n"),
                ("p7", (-1, 1), "n"),

                ("p8", (-1, 0)),
                ("p8", (-1, -1)),
                ("p8", (-1, 1)),
                ("p8", (-2, 0)),
                ("p8", (-1, 0), "q"),
                ("p8", (-1, -1), "q"),
                ("p8", (-1, 1), "q"),
                ("p8", (-1, 0), "r"),
                ("p8", (-1, -1), "r"),
                ("p8", (-1, 1), "r"),
                ("p8", (-1, 0), "b"),
                ("p8", (-1, -1), "b"),
                ("p8", (-1, 1), "b"),
                ("p8", (-1, 0), "n"),
                ("p8", (-1, -1), "n"),
                ("p8", (-1, 1), "n"),
                

                ("n1", (2, 1)),
                ("n1", (1, 2)),
                ("n1", (-2, 1)),
                ("n1", (-1, 2)),
                ("n1", (2, -1)),
                ("n1", (1, -2)),
                ("n1", (-2, -1)),
                ("n1", (-1, -2)),

                ("n2", (2, 1)),
                ("n2", (1, 2)),
                ("n2", (-2, 1)),
                ("n2", (-1, 2)),
                ("n2", (2, -1)),
                ("n2", (1, -2)),
                ("n2", (-2, -1)),
                ("n2", (-1, -2)),

                ("n3", (2, 1)),
                ("n3", (1, 2)),
                ("n3", (-2, 1)),
                ("n3", (-1, 2)),
                ("n3", (2, -1)),
                ("n3", (1, -2)),
                ("n3", (-2, -1)),
                ("n3", (-1, -2)),

                ("n4", (2, 1)),
                ("n4", (1, 2)),
                ("n4", (-2, 1)),
                ("n4", (-1, 2)),
                ("n4", (2, -1)),
                ("n4", (1, -2)),
                ("n4", (-2, -1)),
                ("n4", (-1, -2)),

                ("n5", (2, 1)),
                ("n5", (1, 2)),
                ("n5", (-2, 1)),
                ("n5", (-1, 2)),
                ("n5", (2, -1)),
                ("n5", (1, -2)),
                ("n5", (-2, -1)),
                ("n5", (-1, -2)),

                ("n6", (2, 1)),
                ("n6", (1, 2)),
                ("n6", (-2, 1)),
                ("n6", (-1, 2)),
                ("n6", (2, -1)),
                ("n6", (1, -2)),
                ("n6", (-2, -1)),
                ("n6", (-1, -2)),

                ("n7", (2, 1)),
                ("n7", (1, 2)),
                ("n7", (-2, 1)),
                ("n7", (-1, 2)),
                ("n7", (2, -1)),
                ("n7", (1, -2)),
                ("n7", (-2, -1)),
                ("n7", (-1, -2)),

                ("n8", (2, 1)),
                ("n8", (1, 2)),
                ("n8", (-2, 1)),
                ("n8", (-1, 2)),
                ("n8", (2, -1)),
                ("n8", (1, -2)),
                ("n8", (-2, -1)),
                ("n8", (-1, -2)),

                ("n9", (2, 1)),
                ("n9", (1, 2)),
                ("n9", (-2, 1)),
                ("n9", (-1, 2)),
                ("n9", (2, -1)),
                ("n9", (1, -2)),
                ("n9", (-2, -1)),
                ("n9", (-1, -2)),

                ("n10", (2, 1)),
                ("n10", (1, 2)),
                ("n10", (-2, 1)),
                ("n10", (-1, 2)),
                ("n10", (2, -1)),
                ("n10", (1, -2)),
                ("n10", (-2, -1)),
                ("n10", (-1, -2)),


                ("b1", (-1, 1)),
                ("b1", (-2, 2)),
                ("b1", (-3, 3)),
                ("b1", (-4, 4)),
                ("b1", (-5, 5)),
                ("b1", (-6, 6)),
                ("b1", (-7, 7)),
                ("b1", (1, -1)),
                ("b1", (2, -2)),
                ("b1", (3, -3)),
                ("b1", (4, -4)),
                ("b1", (5, -5)),
                ("b1", (6, -6)),
                ("b1", (7, -7)),
                ("b1", (-1, -1)),
                ("b1", (-2, -2)),
                ("b1", (-3, -3)),
                ("b1", (-4, -4)),
                ("b1", (-5, -5)),
                ("b1", (-6, -6)),
                ("b1", (-7, -7)),
                ("b1", (1, 1)),
                ("b1", (2, 2)),
                ("b1", (3, 3)),
                ("b1", (4, 4)),
                ("b1", (5, 5)),
                ("b1", (6, 6)),
                ("b1", (7, 7)),

                ("b2", (-1, 1)),
                ("b2", (-2, 2)),
                ("b2", (-3, 3)),
                ("b2", (-4, 4)),
                ("b2", (-5, 5)),
                ("b2", (-6, 6)),
                ("b2", (-7, 7)),
                ("b2", (1, -1)),
                ("b2", (2, -2)),
                ("b2", (3, -3)),
                ("b2", (4, -4)),
                ("b2", (5, -5)),
                ("b2", (6, -6)),
                ("b2", (7, -7)),
                ("b2", (-1, -1)),
                ("b2", (-2, -2)),
                ("b2", (-3, -3)),
                ("b2", (-4, -4)),
                ("b2", (-5, -5)),
                ("b2", (-6, -6)),
                ("b2", (-7, -7)),
                ("b2", (1, 1)),
                ("b2", (2, 2)),
                ("b2", (3, 3)),
                ("b2", (4, 4)),
                ("b2", (5, 5)),
                ("b2", (6, 6)),
                ("b2", (7, 7)),

                ("b3", (-1, 1)),
                ("b3", (-2, 2)),
                ("b3", (-3, 3)),
                ("b3", (-4, 4)),
                ("b3", (-5, 5)),
                ("b3", (-6, 6)),
                ("b3", (-7, 7)),
                ("b3", (1, -1)),
                ("b3", (2, -2)),
                ("b3", (3, -3)),
                ("b3", (4, -4)),
                ("b3", (5, -5)),
                ("b3", (6, -6)),
                ("b3", (7, -7)),
                ("b3", (-1, -1)),
                ("b3", (-2, -2)),
                ("b3", (-3, -3)),
                ("b3", (-4, -4)),
                ("b3", (-5, -5)),
                ("b3", (-6, -6)),
                ("b3", (-7, -7)),
                ("b3", (1, 1)),
                ("b3", (2, 2)),
                ("b3", (3, 3)),
                ("b3", (4, 4)),
                ("b3", (5, 5)),
                ("b3", (6, 6)),
                ("b3", (7, 7)),

                ("b4", (-1, 1)),
                ("b4", (-2, 2)),
                ("b4", (-3, 3)),
                ("b4", (-4, 4)),
                ("b4", (-5, 5)),
                ("b4", (-6, 6)),
                ("b4", (-7, 7)),
                ("b4", (1, -1)),
                ("b4", (2, -2)),
                ("b4", (3, -3)),
                ("b4", (4, -4)),
                ("b4", (5, -5)),
                ("b4", (6, -6)),
                ("b4", (7, -7)),
                ("b4", (-1, -1)),
                ("b4", (-2, -2)),
                ("b4", (-3, -3)),
                ("b4", (-4, -4)),
                ("b4", (-5, -5)),
                ("b4", (-6, -6)),
                ("b4", (-7, -7)),
                ("b4", (1, 1)),
                ("b4", (2, 2)),
                ("b4", (3, 3)),
                ("b4", (4, 4)),
                ("b4", (5, 5)),
                ("b4", (6, 6)),
                ("b4", (7, 7)),

                ("b5", (-1, 1)),
                ("b5", (-2, 2)),
                ("b5", (-3, 3)),
                ("b5", (-4, 4)),
                ("b5", (-5, 5)),
                ("b5", (-6, 6)),
                ("b5", (-7, 7)),
                ("b5", (1, -1)),
                ("b5", (2, -2)),
                ("b5", (3, -3)),
                ("b5", (4, -4)),
                ("b5", (5, -5)),
                ("b5", (6, -6)),
                ("b5", (7, -7)),
                ("b5", (-1, -1)),
                ("b5", (-2, -2)),
                ("b5", (-3, -3)),
                ("b5", (-4, -4)),
                ("b5", (-5, -5)),
                ("b5", (-6, -6)),
                ("b5", (-7, -7)),
                ("b5", (1, 1)),
                ("b5", (2, 2)),
                ("b5", (3, 3)),
                ("b5", (4, 4)),
                ("b5", (5, 5)),
                ("b5", (6, 6)),
                ("b5", (7, 7)),

                ("b6", (-1, 1)),
                ("b6", (-2, 2)),
                ("b6", (-3, 3)),
                ("b6", (-4, 4)),
                ("b6", (-5, 5)),
                ("b6", (-6, 6)),
                ("b6", (-7, 7)),
                ("b6", (1, -1)),
                ("b6", (2, -2)),
                ("b6", (3, -3)),
                ("b6", (4, -4)),
                ("b6", (5, -5)),
                ("b6", (6, -6)),
                ("b6", (7, -7)),
                ("b6", (-1, -1)),
                ("b6", (-2, -2)),
                ("b6", (-3, -3)),
                ("b6", (-4, -4)),
                ("b6", (-5, -5)),
                ("b6", (-6, -6)),
                ("b6", (-7, -7)),
                ("b6", (1, 1)),
                ("b6", (2, 2)),
                ("b6", (3, 3)),
                ("b6", (4, 4)),
                ("b6", (5, 5)),
                ("b6", (6, 6)),
                ("b6", (7, 7)),

                ("b7", (-1, 1)),
                ("b7", (-2, 2)),
                ("b7", (-3, 3)),
                ("b7", (-4, 4)),
                ("b7", (-5, 5)),
                ("b7", (-6, 6)),
                ("b7", (-7, 7)),
                ("b7", (1, -1)),
                ("b7", (2, -2)),
                ("b7", (3, -3)),
                ("b7", (4, -4)),
                ("b7", (5, -5)),
                ("b7", (6, -6)),
                ("b7", (7, -7)),
                ("b7", (-1, -1)),
                ("b7", (-2, -2)),
                ("b7", (-3, -3)),
                ("b7", (-4, -4)),
                ("b7", (-5, -5)),
                ("b7", (-6, -6)),
                ("b7", (-7, -7)),
                ("b7", (1, 1)),
                ("b7", (2, 2)),
                ("b7", (3, 3)),
                ("b7", (4, 4)),
                ("b7", (5, 5)),
                ("b7", (6, 6)),
                ("b7", (7, 7)),

                ("b8", (-1, 1)),
                ("b8", (-2, 2)),
                ("b8", (-3, 3)),
                ("b8", (-4, 4)),
                ("b8", (-5, 5)),
                ("b8", (-6, 6)),
                ("b8", (-7, 7)),
                ("b8", (1, -1)),
                ("b8", (2, -2)),
                ("b8", (3, -3)),
                ("b8", (4, -4)),
                ("b8", (5, -5)),
                ("b8", (6, -6)),
                ("b8", (7, -7)),
                ("b8", (-1, -1)),
                ("b8", (-2, -2)),
                ("b8", (-3, -3)),
                ("b8", (-4, -4)),
                ("b8", (-5, -5)),
                ("b8", (-6, -6)),
                ("b8", (-7, -7)),
                ("b8", (1, 1)),
                ("b8", (2, 2)),
                ("b8", (3, 3)),
                ("b8", (4, 4)),
                ("b8", (5, 5)),
                ("b8", (6, 6)),
                ("b8", (7, 7)),

                ("b9", (-1, 1)),
                ("b9", (-2, 2)),
                ("b9", (-3, 3)),
                ("b9", (-4, 4)),
                ("b9", (-5, 5)),
                ("b9", (-6, 6)),
                ("b9", (-7, 7)),
                ("b9", (1, -1)),
                ("b9", (2, -2)),
                ("b9", (3, -3)),
                ("b9", (4, -4)),
                ("b9", (5, -5)),
                ("b9", (6, -6)),
                ("b9", (7, -7)),
                ("b9", (-1, -1)),
                ("b9", (-2, -2)),
                ("b9", (-3, -3)),
                ("b9", (-4, -4)),
                ("b9", (-5, -5)),
                ("b9", (-6, -6)),
                ("b9", (-7, -7)),
                ("b9", (1, 1)),
                ("b9", (2, 2)),
                ("b9", (3, 3)),
                ("b9", (4, 4)),
                ("b9", (5, 5)),
                ("b9", (6, 6)),
                ("b9", (7, 7)),

                ("b10", (-1, 1)),
                ("b10", (-2, 2)),
                ("b10", (-3, 3)),
                ("b10", (-4, 4)),
                ("b10", (-5, 5)),
                ("b10", (-6, 6)),
                ("b10", (-7, 7)),
                ("b10", (1, -1)),
                ("b10", (2, -2)),
                ("b10", (3, -3)),
                ("b10", (4, -4)),
                ("b10", (5, -5)),
                ("b10", (6, -6)),
                ("b10", (7, -7)),
                ("b10", (-1, -1)),
                ("b10", (-2, -2)),
                ("b10", (-3, -3)),
                ("b10", (-4, -4)),
                ("b10", (-5, -5)),
                ("b10", (-6, -6)),
                ("b10", (-7, -7)),
                ("b10", (1, 1)),
                ("b10", (2, 2)),
                ("b10", (3, 3)),
                ("b10", (4, 4)),
                ("b10", (5, 5)),
                ("b10", (6, 6)),
                ("b10", (7, 7)),


                ("r1", (-1, 0)),
                ("r1", (-2, 0)),
                ("r1", (-3, 0)),
                ("r1", (-4, 0)),
                ("r1", (-5, 0)),
                ("r1", (-6, 0)),
                ("r1", (-7, 0)),
                ("r1", (1, 0)),
                ("r1", (2, 0)),
                ("r1", (3, 0)),
                ("r1", (4, 0)),
                ("r1", (5, 0)),
                ("r1", (6, 0)),
                ("r1", (7, 0)),
                ("r1", (0, 1)),
                ("r1", (0, 2)),
                ("r1", (0, 3)),
                ("r1", (0, 4)),
                ("r1", (0, 5)),
                ("r1", (0, 6)),
                ("r1", (0, 7)),
                ("r1", (0, -1)),
                ("r1", (0, -2)),
                ("r1", (0, -3)),
                ("r1", (0, -4)),
                ("r1", (0, -5)),
                ("r1", (0, -6)),
                ("r1", (0, -7)),

                ("r2", (-1, 0)),
                ("r2", (-2, 0)),
                ("r2", (-3, 0)),
                ("r2", (-4, 0)),
                ("r2", (-5, 0)),
                ("r2", (-6, 0)),
                ("r2", (-7, 0)),
                ("r2", (1, 0)),
                ("r2", (2, 0)),
                ("r2", (3, 0)),
                ("r2", (4, 0)),
                ("r2", (5, 0)),
                ("r2", (6, 0)),
                ("r2", (7, 0)),
                ("r2", (0, 1)),
                ("r2", (0, 2)),
                ("r2", (0, 3)),
                ("r2", (0, 4)),
                ("r2", (0, 5)),
                ("r2", (0, 6)),
                ("r2", (0, 7)),
                ("r2", (0, -1)),
                ("r2", (0, -2)),
                ("r2", (0, -3)),
                ("r2", (0, -4)),
                ("r2", (0, -5)),
                ("r2", (0, -6)),
                ("r2", (0, -7)),

                ("r3", (-1, 0)),
                ("r3", (-2, 0)),
                ("r3", (-3, 0)),
                ("r3", (-4, 0)),
                ("r3", (-5, 0)),
                ("r3", (-6, 0)),
                ("r3", (-7, 0)),
                ("r3", (1, 0)),
                ("r3", (2, 0)),
                ("r3", (3, 0)),
                ("r3", (4, 0)),
                ("r3", (5, 0)),
                ("r3", (6, 0)),
                ("r3", (7, 0)),
                ("r3", (0, 1)),
                ("r3", (0, 2)),
                ("r3", (0, 3)),
                ("r3", (0, 4)),
                ("r3", (0, 5)),
                ("r3", (0, 6)),
                ("r3", (0, 7)),
                ("r3", (0, -1)),
                ("r3", (0, -2)),
                ("r3", (0, -3)),
                ("r3", (0, -4)),
                ("r3", (0, -5)),
                ("r3", (0, -6)),
                ("r3", (0, -7)),

                ("r4", (-1, 0)),
                ("r4", (-2, 0)),
                ("r4", (-3, 0)),
                ("r4", (-4, 0)),
                ("r4", (-5, 0)),
                ("r4", (-6, 0)),
                ("r4", (-7, 0)),
                ("r4", (1, 0)),
                ("r4", (2, 0)),
                ("r4", (3, 0)),
                ("r4", (4, 0)),
                ("r4", (5, 0)),
                ("r4", (6, 0)),
                ("r4", (7, 0)),
                ("r4", (0, 1)),
                ("r4", (0, 2)),
                ("r4", (0, 3)),
                ("r4", (0, 4)),
                ("r4", (0, 5)),
                ("r4", (0, 6)),
                ("r4", (0, 7)),
                ("r4", (0, -1)),
                ("r4", (0, -2)),
                ("r4", (0, -3)),
                ("r4", (0, -4)),
                ("r4", (0, -5)),
                ("r4", (0, -6)),
                ("r4", (0, -7)),

                ("r5", (-1, 0)),
                ("r5", (-2, 0)),
                ("r5", (-3, 0)),
                ("r5", (-4, 0)),
                ("r5", (-5, 0)),
                ("r5", (-6, 0)),
                ("r5", (-7, 0)),
                ("r5", (1, 0)),
                ("r5", (2, 0)),
                ("r5", (3, 0)),
                ("r5", (4, 0)),
                ("r5", (5, 0)),
                ("r5", (6, 0)),
                ("r5", (7, 0)),
                ("r5", (0, 1)),
                ("r5", (0, 2)),
                ("r5", (0, 3)),
                ("r5", (0, 4)),
                ("r5", (0, 5)),
                ("r5", (0, 6)),
                ("r5", (0, 7)),
                ("r5", (0, -1)),
                ("r5", (0, -2)),
                ("r5", (0, -3)),
                ("r5", (0, -4)),
                ("r5", (0, -5)),
                ("r5", (0, -6)),
                ("r5", (0, -7)),

                ("r6", (-1, 0)),
                ("r6", (-2, 0)),
                ("r6", (-3, 0)),
                ("r6", (-4, 0)),
                ("r6", (-5, 0)),
                ("r6", (-6, 0)),
                ("r6", (-7, 0)),
                ("r6", (1, 0)),
                ("r6", (2, 0)),
                ("r6", (3, 0)),
                ("r6", (4, 0)),
                ("r6", (5, 0)),
                ("r6", (6, 0)),
                ("r6", (7, 0)),
                ("r6", (0, 1)),
                ("r6", (0, 2)),
                ("r6", (0, 3)),
                ("r6", (0, 4)),
                ("r6", (0, 5)),
                ("r6", (0, 6)),
                ("r6", (0, 7)),
                ("r6", (0, -1)),
                ("r6", (0, -2)),
                ("r6", (0, -3)),
                ("r6", (0, -4)),
                ("r6", (0, -5)),
                ("r6", (0, -6)),
                ("r6", (0, -7)),

                ("r7", (-1, 0)),
                ("r7", (-2, 0)),
                ("r7", (-3, 0)),
                ("r7", (-4, 0)),
                ("r7", (-5, 0)),
                ("r7", (-6, 0)),
                ("r7", (-7, 0)),
                ("r7", (1, 0)),
                ("r7", (2, 0)),
                ("r7", (3, 0)),
                ("r7", (4, 0)),
                ("r7", (5, 0)),
                ("r7", (6, 0)),
                ("r7", (7, 0)),
                ("r7", (0, 1)),
                ("r7", (0, 2)),
                ("r7", (0, 3)),
                ("r7", (0, 4)),
                ("r7", (0, 5)),
                ("r7", (0, 6)),
                ("r7", (0, 7)),
                ("r7", (0, -1)),
                ("r7", (0, -2)),
                ("r7", (0, -3)),
                ("r7", (0, -4)),
                ("r7", (0, -5)),
                ("r7", (0, -6)),
                ("r7", (0, -7)),

                ("r8", (-1, 0)),
                ("r8", (-2, 0)),
                ("r8", (-3, 0)),
                ("r8", (-4, 0)),
                ("r8", (-5, 0)),
                ("r8", (-6, 0)),
                ("r8", (-7, 0)),
                ("r8", (1, 0)),
                ("r8", (2, 0)),
                ("r8", (3, 0)),
                ("r8", (4, 0)),
                ("r8", (5, 0)),
                ("r8", (6, 0)),
                ("r8", (7, 0)),
                ("r8", (0, 1)),
                ("r8", (0, 2)),
                ("r8", (0, 3)),
                ("r8", (0, 4)),
                ("r8", (0, 5)),
                ("r8", (0, 6)),
                ("r8", (0, 7)),
                ("r8", (0, -1)),
                ("r8", (0, -2)),
                ("r8", (0, -3)),
                ("r8", (0, -4)),
                ("r8", (0, -5)),
                ("r8", (0, -6)),
                ("r8", (0, -7)),

                ("r9", (-1, 0)),
                ("r9", (-2, 0)),
                ("r9", (-3, 0)),
                ("r9", (-4, 0)),
                ("r9", (-5, 0)),
                ("r9", (-6, 0)),
                ("r9", (-7, 0)),
                ("r9", (1, 0)),
                ("r9", (2, 0)),
                ("r9", (3, 0)),
                ("r9", (4, 0)),
                ("r9", (5, 0)),
                ("r9", (6, 0)),
                ("r9", (7, 0)),
                ("r9", (0, 1)),
                ("r9", (0, 2)),
                ("r9", (0, 3)),
                ("r9", (0, 4)),
                ("r9", (0, 5)),
                ("r9", (0, 6)),
                ("r9", (0, 7)),
                ("r9", (0, -1)),
                ("r9", (0, -2)),
                ("r9", (0, -3)),
                ("r9", (0, -4)),
                ("r9", (0, -5)),
                ("r9", (0, -6)),
                ("r9", (0, -7)),

                ("r10", (-1, 0)),
                ("r10", (-2, 0)),
                ("r10", (-3, 0)),
                ("r10", (-4, 0)),
                ("r10", (-5, 0)),
                ("r10", (-6, 0)),
                ("r10", (-7, 0)),
                ("r10", (1, 0)),
                ("r10", (2, 0)),
                ("r10", (3, 0)),
                ("r10", (4, 0)),
                ("r10", (5, 0)),
                ("r10", (6, 0)),
                ("r10", (7, 0)),
                ("r10", (0, 1)),
                ("r10", (0, 2)),
                ("r10", (0, 3)),
                ("r10", (0, 4)),
                ("r10", (0, 5)),
                ("r10", (0, 6)),
                ("r10", (0, 7)),
                ("r10", (0, -1)),
                ("r10", (0, -2)),
                ("r10", (0, -3)),
                ("r10", (0, -4)),
                ("r10", (0, -5)),
                ("r10", (0, -6)),
                ("r10", (0, -7)),


                ("q1", (-1, 1)),
                ("q1", (-2, 2)),
                ("q1", (-3, 3)),
                ("q1", (-4, 4)),
                ("q1", (-5, 5)),
                ("q1", (-6, 6)),
                ("q1", (-7, 7)),
                ("q1", (1, -1)),
                ("q1", (2, -2)),
                ("q1", (3, -3)),
                ("q1", (4, -4)),
                ("q1", (5, -5)),
                ("q1", (6, -6)),
                ("q1", (7, -7)),
                ("q1", (-1, -1)),
                ("q1", (-2, -2)),
                ("q1", (-3, -3)),
                ("q1", (-4, -4)),
                ("q1", (-5, -5)),
                ("q1", (-6, -6)),
                ("q1", (-7, -7)),
                ("q1", (1, 1)),
                ("q1", (2, 2)),
                ("q1", (3, 3)),
                ("q1", (4, 4)),
                ("q1", (5, 5)),
                ("q1", (6, 6)),
                ("q1", (7, 7)),
                ("q1", (-1, 0)),
                ("q1", (-2, 0)),
                ("q1", (-3, 0)),
                ("q1", (-4, 0)),
                ("q1", (-5, 0)),
                ("q1", (-6, 0)),
                ("q1", (-7, 0)),
                ("q1", (1, 0)),
                ("q1", (2, 0)),
                ("q1", (3, 0)),
                ("q1", (4, 0)),
                ("q1", (5, 0)),
                ("q1", (6, 0)),
                ("q1", (7, 0)),
                ("q1", (0, 1)),
                ("q1", (0, 2)),
                ("q1", (0, 3)),
                ("q1", (0, 4)),
                ("q1", (0, 5)),
                ("q1", (0, 6)),
                ("q1", (0, 7)),
                ("q1", (0, -1)),
                ("q1", (0, -2)),
                ("q1", (0, -3)),
                ("q1", (0, -4)),
                ("q1", (0, -5)),
                ("q1", (0, -6)),
                ("q1", (0, -7)),

                ("q2", (-1, 1)),
                ("q2", (-2, 2)),
                ("q2", (-3, 3)),
                ("q2", (-4, 4)),
                ("q2", (-5, 5)),
                ("q2", (-6, 6)),
                ("q2", (-7, 7)),
                ("q2", (1, -1)),
                ("q2", (2, -2)),
                ("q2", (3, -3)),
                ("q2", (4, -4)),
                ("q2", (5, -5)),
                ("q2", (6, -6)),
                ("q2", (7, -7)),
                ("q2", (-1, -1)),
                ("q2", (-2, -2)),
                ("q2", (-3, -3)),
                ("q2", (-4, -4)),
                ("q2", (-5, -5)),
                ("q2", (-6, -6)),
                ("q2", (-7, -7)),
                ("q2", (1, 1)),
                ("q2", (2, 2)),
                ("q2", (3, 3)),
                ("q2", (4, 4)),
                ("q2", (5, 5)),
                ("q2", (6, 6)),
                ("q2", (7, 7)),
                ("q2", (-1, 0)),
                ("q2", (-2, 0)),
                ("q2", (-3, 0)),
                ("q2", (-4, 0)),
                ("q2", (-5, 0)),
                ("q2", (-6, 0)),
                ("q2", (-7, 0)),
                ("q2", (1, 0)),
                ("q2", (2, 0)),
                ("q2", (3, 0)),
                ("q2", (4, 0)),
                ("q2", (5, 0)),
                ("q2", (6, 0)),
                ("q2", (7, 0)),
                ("q2", (0, 1)),
                ("q2", (0, 2)),
                ("q2", (0, 3)),
                ("q2", (0, 4)),
                ("q2", (0, 5)),
                ("q2", (0, 6)),
                ("q2", (0, 7)),
                ("q2", (0, -1)),
                ("q2", (0, -2)),
                ("q2", (0, -3)),
                ("q2", (0, -4)),
                ("q2", (0, -5)),
                ("q2", (0, -6)),
                ("q2", (0, -7)),

                ("q3", (-1, 1)),
                ("q3", (-2, 2)),
                ("q3", (-3, 3)),
                ("q3", (-4, 4)),
                ("q3", (-5, 5)),
                ("q3", (-6, 6)),
                ("q3", (-7, 7)),
                ("q3", (1, -1)),
                ("q3", (2, -2)),
                ("q3", (3, -3)),
                ("q3", (4, -4)),
                ("q3", (5, -5)),
                ("q3", (6, -6)),
                ("q3", (7, -7)),
                ("q3", (-1, -1)),
                ("q3", (-2, -2)),
                ("q3", (-3, -3)),
                ("q3", (-4, -4)),
                ("q3", (-5, -5)),
                ("q3", (-6, -6)),
                ("q3", (-7, -7)),
                ("q3", (1, 1)),
                ("q3", (2, 2)),
                ("q3", (3, 3)),
                ("q3", (4, 4)),
                ("q3", (5, 5)),
                ("q3", (6, 6)),
                ("q3", (7, 7)),
                ("q3", (-1, 0)),
                ("q3", (-2, 0)),
                ("q3", (-3, 0)),
                ("q3", (-4, 0)),
                ("q3", (-5, 0)),
                ("q3", (-6, 0)),
                ("q3", (-7, 0)),
                ("q3", (1, 0)),
                ("q3", (2, 0)),
                ("q3", (3, 0)),
                ("q3", (4, 0)),
                ("q3", (5, 0)),
                ("q3", (6, 0)),
                ("q3", (7, 0)),
                ("q3", (0, 1)),
                ("q3", (0, 2)),
                ("q3", (0, 3)),
                ("q3", (0, 4)),
                ("q3", (0, 5)),
                ("q3", (0, 6)),
                ("q3", (0, 7)),
                ("q3", (0, -1)),
                ("q3", (0, -2)),
                ("q3", (0, -3)),
                ("q3", (0, -4)),
                ("q3", (0, -5)),
                ("q3", (0, -6)),
                ("q3", (0, -7)),

                ("q4", (-1, 1)),
                ("q4", (-2, 2)),
                ("q4", (-3, 3)),
                ("q4", (-4, 4)),
                ("q4", (-5, 5)),
                ("q4", (-6, 6)),
                ("q4", (-7, 7)),
                ("q4", (1, -1)),
                ("q4", (2, -2)),
                ("q4", (3, -3)),
                ("q4", (4, -4)),
                ("q4", (5, -5)),
                ("q4", (6, -6)),
                ("q4", (7, -7)),
                ("q4", (-1, -1)),
                ("q4", (-2, -2)),
                ("q4", (-3, -3)),
                ("q4", (-4, -4)),
                ("q4", (-5, -5)),
                ("q4", (-6, -6)),
                ("q4", (-7, -7)),
                ("q4", (1, 1)),
                ("q4", (2, 2)),
                ("q4", (3, 3)),
                ("q4", (4, 4)),
                ("q4", (5, 5)),
                ("q4", (6, 6)),
                ("q4", (7, 7)),
                ("q4", (-1, 0)),
                ("q4", (-2, 0)),
                ("q4", (-3, 0)),
                ("q4", (-4, 0)),
                ("q4", (-5, 0)),
                ("q4", (-6, 0)),
                ("q4", (-7, 0)),
                ("q4", (1, 0)),
                ("q4", (2, 0)),
                ("q4", (3, 0)),
                ("q4", (4, 0)),
                ("q4", (5, 0)),
                ("q4", (6, 0)),
                ("q4", (7, 0)),
                ("q4", (0, 1)),
                ("q4", (0, 2)),
                ("q4", (0, 3)),
                ("q4", (0, 4)),
                ("q4", (0, 5)),
                ("q4", (0, 6)),
                ("q4", (0, 7)),
                ("q4", (0, -1)),
                ("q4", (0, -2)),
                ("q4", (0, -3)),
                ("q4", (0, -4)),
                ("q4", (0, -5)),
                ("q4", (0, -6)),
                ("q4", (0, -7)),

                ("q5", (-1, 1)),
                ("q5", (-2, 2)),
                ("q5", (-3, 3)),
                ("q5", (-4, 4)),
                ("q5", (-5, 5)),
                ("q5", (-6, 6)),
                ("q5", (-7, 7)),
                ("q5", (1, -1)),
                ("q5", (2, -2)),
                ("q5", (3, -3)),
                ("q5", (4, -4)),
                ("q5", (5, -5)),
                ("q5", (6, -6)),
                ("q5", (7, -7)),
                ("q5", (-1, -1)),
                ("q5", (-2, -2)),
                ("q5", (-3, -3)),
                ("q5", (-4, -4)),
                ("q5", (-5, -5)),
                ("q5", (-6, -6)),
                ("q5", (-7, -7)),
                ("q5", (1, 1)),
                ("q5", (2, 2)),
                ("q5", (3, 3)),
                ("q5", (4, 4)),
                ("q5", (5, 5)),
                ("q5", (6, 6)),
                ("q5", (7, 7)),
                ("q5", (-1, 0)),
                ("q5", (-2, 0)),
                ("q5", (-3, 0)),
                ("q5", (-4, 0)),
                ("q5", (-5, 0)),
                ("q5", (-6, 0)),
                ("q5", (-7, 0)),
                ("q5", (1, 0)),
                ("q5", (2, 0)),
                ("q5", (3, 0)),
                ("q5", (4, 0)),
                ("q5", (5, 0)),
                ("q5", (6, 0)),
                ("q5", (7, 0)),
                ("q5", (0, 1)),
                ("q5", (0, 2)),
                ("q5", (0, 3)),
                ("q5", (0, 4)),
                ("q5", (0, 5)),
                ("q5", (0, 6)),
                ("q5", (0, 7)),
                ("q5", (0, -1)),
                ("q5", (0, -2)),
                ("q5", (0, -3)),
                ("q5", (0, -4)),
                ("q5", (0, -5)),
                ("q5", (0, -6)),
                ("q5", (0, -7)),

                ("q6", (-1, 1)),
                ("q6", (-2, 2)),
                ("q6", (-3, 3)),
                ("q6", (-4, 4)),
                ("q6", (-5, 5)),
                ("q6", (-6, 6)),
                ("q6", (-7, 7)),
                ("q6", (1, -1)),
                ("q6", (2, -2)),
                ("q6", (3, -3)),
                ("q6", (4, -4)),
                ("q6", (5, -5)),
                ("q6", (6, -6)),
                ("q6", (7, -7)),
                ("q6", (-1, -1)),
                ("q6", (-2, -2)),
                ("q6", (-3, -3)),
                ("q6", (-4, -4)),
                ("q6", (-5, -5)),
                ("q6", (-6, -6)),
                ("q6", (-7, -7)),
                ("q6", (1, 1)),
                ("q6", (2, 2)),
                ("q6", (3, 3)),
                ("q6", (4, 4)),
                ("q6", (5, 5)),
                ("q6", (6, 6)),
                ("q6", (7, 7)),
                ("q6", (-1, 0)),
                ("q6", (-2, 0)),
                ("q6", (-3, 0)),
                ("q6", (-4, 0)),
                ("q6", (-5, 0)),
                ("q6", (-6, 0)),
                ("q6", (-7, 0)),
                ("q6", (1, 0)),
                ("q6", (2, 0)),
                ("q6", (3, 0)),
                ("q6", (4, 0)),
                ("q6", (5, 0)),
                ("q6", (6, 0)),
                ("q6", (7, 0)),
                ("q6", (0, 1)),
                ("q6", (0, 2)),
                ("q6", (0, 3)),
                ("q6", (0, 4)),
                ("q6", (0, 5)),
                ("q6", (0, 6)),
                ("q6", (0, 7)),
                ("q6", (0, -1)),
                ("q6", (0, -2)),
                ("q6", (0, -3)),
                ("q6", (0, -4)),
                ("q6", (0, -5)),
                ("q6", (0, -6)),
                ("q6", (0, -7)),

                ("q7", (-1, 1)),
                ("q7", (-2, 2)),
                ("q7", (-3, 3)),
                ("q7", (-4, 4)),
                ("q7", (-5, 5)),
                ("q7", (-6, 6)),
                ("q7", (-7, 7)),
                ("q7", (1, -1)),
                ("q7", (2, -2)),
                ("q7", (3, -3)),
                ("q7", (4, -4)),
                ("q7", (5, -5)),
                ("q7", (6, -6)),
                ("q7", (7, -7)),
                ("q7", (-1, -1)),
                ("q7", (-2, -2)),
                ("q7", (-3, -3)),
                ("q7", (-4, -4)),
                ("q7", (-5, -5)),
                ("q7", (-6, -6)),
                ("q7", (-7, -7)),
                ("q7", (1, 1)),
                ("q7", (2, 2)),
                ("q7", (3, 3)),
                ("q7", (4, 4)),
                ("q7", (5, 5)),
                ("q7", (6, 6)),
                ("q7", (7, 7)),
                ("q7", (-1, 0)),
                ("q7", (-2, 0)),
                ("q7", (-3, 0)),
                ("q7", (-4, 0)),
                ("q7", (-5, 0)),
                ("q7", (-6, 0)),
                ("q7", (-7, 0)),
                ("q7", (1, 0)),
                ("q7", (2, 0)),
                ("q7", (3, 0)),
                ("q7", (4, 0)),
                ("q7", (5, 0)),
                ("q7", (6, 0)),
                ("q7", (7, 0)),
                ("q7", (0, 1)),
                ("q7", (0, 2)),
                ("q7", (0, 3)),
                ("q7", (0, 4)),
                ("q7", (0, 5)),
                ("q7", (0, 6)),
                ("q7", (0, 7)),
                ("q7", (0, -1)),
                ("q7", (0, -2)),
                ("q7", (0, -3)),
                ("q7", (0, -4)),
                ("q7", (0, -5)),
                ("q7", (0, -6)),
                ("q7", (0, -7)),

                ("q8", (-1, 1)),
                ("q8", (-2, 2)),
                ("q8", (-3, 3)),
                ("q8", (-4, 4)),
                ("q8", (-5, 5)),
                ("q8", (-6, 6)),
                ("q8", (-7, 7)),
                ("q8", (1, -1)),
                ("q8", (2, -2)),
                ("q8", (3, -3)),
                ("q8", (4, -4)),
                ("q8", (5, -5)),
                ("q8", (6, -6)),
                ("q8", (7, -7)),
                ("q8", (-1, -1)),
                ("q8", (-2, -2)),
                ("q8", (-3, -3)),
                ("q8", (-4, -4)),
                ("q8", (-5, -5)),
                ("q8", (-6, -6)),
                ("q8", (-7, -7)),
                ("q8", (1, 1)),
                ("q8", (2, 2)),
                ("q8", (3, 3)),
                ("q8", (4, 4)),
                ("q8", (5, 5)),
                ("q8", (6, 6)),
                ("q8", (7, 7)),
                ("q8", (-1, 0)),
                ("q8", (-2, 0)),
                ("q8", (-3, 0)),
                ("q8", (-4, 0)),
                ("q8", (-5, 0)),
                ("q8", (-6, 0)),
                ("q8", (-7, 0)),
                ("q8", (1, 0)),
                ("q8", (2, 0)),
                ("q8", (3, 0)),
                ("q8", (4, 0)),
                ("q8", (5, 0)),
                ("q8", (6, 0)),
                ("q8", (7, 0)),
                ("q8", (0, 1)),
                ("q8", (0, 2)),
                ("q8", (0, 3)),
                ("q8", (0, 4)),
                ("q8", (0, 5)),
                ("q8", (0, 6)),
                ("q8", (0, 7)),
                ("q8", (0, -1)),
                ("q8", (0, -2)),
                ("q8", (0, -3)),
                ("q8", (0, -4)),
                ("q8", (0, -5)),
                ("q8", (0, -6)),
                ("q8", (0, -7)),

                ("q9", (-1, 1)),
                ("q9", (-2, 2)),
                ("q9", (-3, 3)),
                ("q9", (-4, 4)),
                ("q9", (-5, 5)),
                ("q9", (-6, 6)),
                ("q9", (-7, 7)),
                ("q9", (1, -1)),
                ("q9", (2, -2)),
                ("q9", (3, -3)),
                ("q9", (4, -4)),
                ("q9", (5, -5)),
                ("q9", (6, -6)),
                ("q9", (7, -7)),
                ("q9", (-1, -1)),
                ("q9", (-2, -2)),
                ("q9", (-3, -3)),
                ("q9", (-4, -4)),
                ("q9", (-5, -5)),
                ("q9", (-6, -6)),
                ("q9", (-7, -7)),
                ("q9", (1, 1)),
                ("q9", (2, 2)),
                ("q9", (3, 3)),
                ("q9", (4, 4)),
                ("q9", (5, 5)),
                ("q9", (6, 6)),
                ("q9", (7, 7)),
                ("q9", (-1, 0)),
                ("q9", (-2, 0)),
                ("q9", (-3, 0)),
                ("q9", (-4, 0)),
                ("q9", (-5, 0)),
                ("q9", (-6, 0)),
                ("q9", (-7, 0)),
                ("q9", (1, 0)),
                ("q9", (2, 0)),
                ("q9", (3, 0)),
                ("q9", (4, 0)),
                ("q9", (5, 0)),
                ("q9", (6, 0)),
                ("q9", (7, 0)),
                ("q9", (0, 1)),
                ("q9", (0, 2)),
                ("q9", (0, 3)),
                ("q9", (0, 4)),
                ("q9", (0, 5)),
                ("q9", (0, 6)),
                ("q9", (0, 7)),
                ("q9", (0, -1)),
                ("q9", (0, -2)),
                ("q9", (0, -3)),
                ("q9", (0, -4)),
                ("q9", (0, -5)),
                ("q9", (0, -6)),
                ("q9", (0, -7)),

                ("k", (-1, 0)),
                ("k", (-1, -1)),
                ("k", (-1, 1)),
                ("k", (0, -1)),
                ("k", (0, -2)),
                ("k", (0, 1)),
                ("k", (0, 2)),
                ("k", (1, 0)),
                ("k", (1, -1)),
                ("k", (1, 1)),
        ]

        
    def reset_game_state(self):
        """
        Resets the game state to its initial configuration.

        This method resets the chess game state by reassigning the initial board configuration to both the white player's
        board and the black player's board. It also clears the move histories.

        Returns:
            - None
        """
        self.move_history_cn = []
        self.perspective = "w"

        self.en_passant_tile = None

        self.castling_available_r1_white = True
        self.castling_available_r2_white = True
        self.castling_available_r1_black = True
        self.castling_available_r2_black = True

        self.number_of_next_knight_white = 3
        self.number_of_next_knight_black = 3
        self.number_of_next_bishop_white = 3
        self.number_of_next_bishop_black = 3
        self.number_of_next_rook_white = 3
        self.number_of_next_rook_black = 3
        self.number_of_next_queen_white = 2
        self.number_of_next_queen_black = 2

        self.board_state = [["or2","on2","ob2","oq1","ok","ob1","on1","or1"],
                ["op8","op7","op6","op5","op4","op3","op2","op1"],
                ["_","_","_","_","_","_","_","_"],
                ["_","_","_","_","_","_","_","_"],
                ["_","_","_","_","_","_","_","_"],
                ["_","_","_","_","_","_","_","_"],
                ["p1","p2","p3","p4","p5","p6","p7","p8"],
                ["r1","n1","b1","q1","k","b2","n2","r2"]]

    
    def change_board_perspective(self, board) -> List[List[str]]:
        """
        Changes the perspective of the chessboard to represent the opponent's view.

        This method takes a chessboard and transforms it to represent the perspective of the
        opponent. It reverses both the rows and columns and updates the piece labels accordingly.

        Parameters:
            - board (List[List[str]]): The current state of the chessboard.

        Returns:
            - (List[List[str]]): The updated chessboard representing the opponent's perspective.
        """
        board = [row[::-1] for row in board[::-1]]

        for i in range(8):
            for j in range(8):
                board[i][j] = self.PIECE_LABELS_OPPONENTS_PERSPECTIVE[board[i][j]]

        return board


    def change_perspective(self):
        """
        Changes the perspective of the game state.

        This method updates the internal game state to represent the perspective of the
        opposite player. It calls the `change_board_perspective` method to update the
        chessboard accordingly.

        Parameters:
            - None

        Returns:
            - None
        """
        self.board = self.change_board_perspective(copy.deepcopy(self.board))

        if self.perspective == "w":
            self.perspective = "b"
        else:
            self.perspective = "w"

        
    def preprosess_input(self, board) -> np.ndarray:
        """
        Translates a chessboard represented as a list of strings to a NumPy array with piece labels 
        converted to their integer representations. The resulting array is formatted to be fed into 
        a neural network as input.

        Parameters:
            - board (List[str]): The input chessboard with piece labels in their string representations.

        Returns:
            - np.ndarray: The chessboard with piece labels converted to their integer representations, 
                          formatted as a NumPy array with a batch dimension.
        """
        translated_board = [[self.PIECE_LABELS_STRING_TO_INTEGER[piece] for piece in row] for row in board]
        return np.array([translated_board])
    

    def train_neural_network(self, board, reward, q_values, action_index):
        """
        Trains the artificial neural network (ANN) based on the provided reward, updating the Q-values 
        for the specified action index in the output layer.

        Parameters:
            - board (List[str]): The current state of the chessboard with piece labels in string representations.
            - reward (float): The reward signal indicating the success or failure of the taken action.
            - q_values (np.ndarray): The current Q-values predicted by the neural network for the given state.
            - action_index (int): The index of the action taken in the Q-values array.

        Returns:
            None

        Note:
            This method modifies the Q-values in-place based on the observed reward and updates the neural network's weights accordingly.      
        """
        q_values[0, action_index] = reward
        self.neuralNetwork.model.fit(self.preprosess_input(board), q_values, epochs=1, verbose=0)


    def get_action_piece_tiles(self, board, action):
        """
        Retrieves information about the tiles involved in a specific action on the chessboard.

        Parameters:
            - board (List[List[str]]): The current state of the chessboard with piece labels in string representations.
            - action (Tuple[str, Tuple[int, int]]): A tuple representing the action to be performed on the board.
                - The first element of the tuple (`action[0]`) is the piece label to be moved.
                - The second element of the tuple (`action[1]`) is a tuple representing the direction of the move as (dx, dy).

        Returns:
            - Tuple[str, str, Tuple[int, int], Tuple[int, int]]: A tuple containing information about the tiles involved in the action.
                - The first element is the piece label to be moved.
                - The second element is the piece label on the destination tile after the move.
                - The third element is a tuple representing the coordinates of the source tile.
                - The fourth element is a tuple representing the coordinates of the destination tile.

        Note:
            - If the specified piece label is not found on the board, the method returns (None, None, None, None).   
        """
        for x in range(len(board)):
            for y in range(len(board[x])):
                if board[x][y] == action[0]:
                    return board[x][y], board[x+action[1][0]][y+action[1][1]], [x,y], [x+action[1][0],y+action[1][1]]
        return None, None, None, None
    

    def king_in_check(self, board) -> bool:
        """
        Determines if the current position of the king on the chessboard is under check.

        Parameters:
        - board (List[List[str]]): The current state of the chessboard.

        Returns:
        - bool: True if the king is in check, False otherwise.
        """
        for i in range(8):
            for j in range(8):
                if board[x][y] == "k":          # Finds king tile position
                    x = i
                    y = j  
                    break
            
        in_pawn_check_tiles = [(-1, 1), (-1, -1)]
        in_knight_check_tiles = [(2, 1), (1, 2), (-2, 1), (-1, 2), (2, -1), (1, -2), (-2, -1), (-1, -2)]
        in_bishop_and_queen_check_tiles_1 = [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7)]
        in_bishop_and_queen_check_tiles_2 = [(-1, 1), (-2, 2), (-3, 3), (-4, 4), (-5, 5), (-6, 6), (-7, 7)]
        in_bishop_and_queen_check_tiles_3 = [(1, -1), (2, -2), (3, -3), (4, -4), (5, -5), (6, -6), (7, -7)]
        in_bishop_and_queen_check_tiles_4 = [(-1, -1), (-2, -2), (-3, -3), (-4, -4), (-5, -5), (-6, -6), (-7, -7)]
        in_rook_and_queen_check_tiles_1 = [(1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0)]
        in_rook_and_queen_check_tiles_2 = [(-1, 0), (-2, 0), (-3, 0), (-4, 0), (-5, 0), (-6, 0), (-7, 0)]
        in_rook_and_queen_check_tiles_3 = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)]
        in_rook_and_queen_check_tiles_4 = [(0, -1), (0, -2), (0, -3), (0, -4), (0, -5), (0, -6), (0, -7)]
        
        for dx, dy in in_pawn_check_tiles: # Checks for opponents pawns checking king
            try:
                if board[x + dx][y + dy][0:2] == "op":
                    return True
            except IndexError:
                pass


        for dx, dy in in_knight_check_tiles: # Checks for opponents knights checking king
            try:
                if board[x + dx][y + dy][0:2] == "on":
                    return True
            except IndexError:
                pass


        for dx, dy in in_bishop_and_queen_check_tiles_1: # Checks for opponents bishops or queens checking king
            try:
                if board[x + dx][y + dy][0:2] == "ob" or board[x + dx][y + dy][0:2] == "oq":
                    return True
                elif board[x + dx][y + dy][0] == "_":
                    pass
                else:
                    break
            except IndexError:
                pass
        for dx, dy in in_bishop_and_queen_check_tiles_2: # Checks for opponents bishops or queens checking king
            try:
                if board[x + dx][y + dy][0:2] == "ob" or board[x + dx][y + dy][0:2] == "oq":
                    return True
                elif board[x + dx][y + dy][0] == "_":
                    pass
                else:
                    break
            except IndexError:
                pass
        for dx, dy in in_bishop_and_queen_check_tiles_3: # Checks for opponents bishops or queens checking king
            try:
                if board[x + dx][y + dy][0:2] == "ob" or board[x + dx][y + dy][0:2] == "oq":
                    return True
                elif board[x + dx][y + dy][0] == "_":
                    pass
                else:
                    break
            except IndexError:
                pass
        for dx, dy in in_bishop_and_queen_check_tiles_4: # Checks for opponents bishops or queens checking king
            try:
                if board[x + dx][y + dy][0:2] == "ob" or board[x + dx][y + dy][0:2] == "oq":
                    return True
                elif board[x + dx][y + dy][0] == "_":
                    pass
                else:
                    break
            except IndexError:
                pass
        

        for dx, dy in in_rook_and_queen_check_tiles_1: # Checks for opponents rooks or queens checking king
            try:
                if board[x + dx][y + dy][0:2] == "or" or board[x + dx][y + dy][0:2] == "oq":
                    return True
                elif board[x + dx][y + dy][0] == "_":
                    pass
                else:
                    break
            except IndexError:
                pass
        for dx, dy in in_rook_and_queen_check_tiles_2: # Checks for opponents rooks or queens checking king
            try:
                if board[x + dx][y + dy][0:2] == "or" or board[x + dx][y + dy][0:2] == "oq":
                    return True
                elif board[x + dx][y + dy][0] == "_":
                    pass
                else:
                    break
            except IndexError:
                pass
        for dx, dy in in_rook_and_queen_check_tiles_3: # Checks for opponents rooks or queens checking king
            try:
                if board[x + dx][y + dy][0:2] == "or" or board[x + dx][y + dy][0:2] == "oq":
                    return True
                elif board[x + dx][y + dy][0] == "_":
                    pass
                else:
                    break
            except IndexError:
                pass
        for dx, dy in in_rook_and_queen_check_tiles_4: # Checks for opponents rooks or queens checking king
            try:
                if board[x + dx][y + dy][0:2] == "or" or board[x + dx][y + dy][0:2] == "oq":
                    return True
                elif board[x + dx][y + dy][0] == "_":
                    pass
                else:
                    break
            except IndexError:
                pass

        return False # If no king in check flags hit return false
        

    def opponent_king_in_check(self, board) -> bool:
        """
        Determines if the current position of the opponent king on the chessboard is under check.

        Parameters:
        - board (List[List[str]]): The current state of the chessboard.

        Returns:
        - bool: True if the opponent king is in check, False otherwise.
        """
        return self.king_in_check(self.change_board_perspective(copy.deepcopy(board)))
    

    def tile_indices_to_coordinates(self, source_tile, target_tile):
        """
        Convert chess tile indices to coordinates based on the given perspective.

        Parameters:
            - source_tile (List[int]): The index of the source tile.
            - target_tile (List[int]): The index of the target tile.

        Returns:
            - str: A string containing containinng the source tile and target tile coordinates representing a move.
        """
        if self.perspective == "w":
            return self.TILE_INDICES_TO_COORDINATES_WHITE_PERSPECTIVE[(source_tile[0],source_tile[1])]+self.TILE_INDICES_TO_COORDINATES_WHITE_PERSPECTIVE[(target_tile[0],target_tile[1])]
        else:
            return self.TILE_INDICES_TO_COORDINATES_BLACK_PERSPECTIVE[(source_tile[0],source_tile[1])]+self.TILE_INDICES_TO_COORDINATES_BLACK_PERSPECTIVE[(target_tile[0],target_tile[1])]


    def invalid_action(self, action_info, q_values, action_index):
        """
        Handles the case where an invalid action is taken by the agent.

        This method is called when an invalid action is attempted during the game. It updates
        the neural network based on the negative reward associated with the invalid action.

        Parameters:
            - action_info (tuple): Information about the attempted action.
            - q_values (numpy.ndarray): Q-values predicted by the neural network for the current state.
            - action_index (int): Index of the attempted action in the list of possible moves.
        """
        action_reward = -1000.0
        valid_move = False
        game_end = False

        self.train_neural_network(self.board_state, action_reward, q_values, action_index)
         
        return action_info, action_reward, valid_move, game_end


    def valid_action(self, action_info, action_reward, q_values, action_index, target_piece):
        """
        Handles the case where an valid action is taken by the agent.

        This method is called when an valid action is attempted during the game. It updates
        the neural network based on the reward associated with the action and checks if it causes a checked king position 
        that would make it an invalid move. Also Checks if it causes a checked opponent king position and rewards the action greatly.

        Parameters:
            - action_info (tuple): Information about the attempted action.
            - action_reward (tuple): Reward associated with the action.
            - q_values (numpy.ndarray): Q-values predicted by the neural network for the current state.
            - action_index (int): Index of the attempted action in the list of possible moves.
            - target_piece (str): The target tile piece of the action being taken.
        """
        valid_move = True
        if target_piece == "ok": # Checks if opponent king is captured to declare the check mate and end of the game
            game_end = True
        else:
            game_end = False

        if self.opponent_king_in_check(self.board_state):
            action_reward += 1000

        self.train_neural_network(self.board_state, action_reward, q_values, action_index)
        self.change_perspective()

        return action_info, action_reward, valid_move, game_end


    def attempt_action(self, action):
        """
        Attempts to take the given action, and trains the artificial neural network (ANN) based on the utility of the action,
        based on the game state, and the utility is represented by the action_reward.

        Parameters:
            - action (Tuple[str, Tuple[int]]): The tuple representing the action being attempted.
            or
            - action (Tuple[str, Tuple[int], str]) *This is only the case for pawn promotion attempts*
        
        Returns:
            - action_info (str): String details the move attempt outcome.
            - action_reward (int): Integer indicating the utility of the action attempted.
            - valid_move (bool): Boolean indicates whether move attempt was valid or not.
            - game_end (bool): Boolean indicates whether end game state is reached.

        Note:
            This method modifies the Q-values in-place based on the observed reward and updates the neural network's weights accordingly.      
        """
        board = self.board_state.copy()
        en_passant_location = self.en_passant_tile

        if self.perspective =="w":
            number_of_next_knight = self.number_of_next_knight_white
            number_of_next_bishop = self.number_of_next_bishop_white
            number_of_next_rook = self.number_of_next_rook_white
            number_of_next_queen = self.number_of_next_queen_white
            castling_r1_available = self.castling_available_r1_white
            castling_r2_available = self.castling_available_r2_white
        else:
            number_of_next_knight = self.number_of_next_knight_black
            number_of_next_bishop = self.number_of_next_bishop_black
            number_of_next_rook = self.number_of_next_rook_black
            number_of_next_queen = self.number_of_next_queen_black
            castling_r1_available = self.castling_available_r1_black
            castling_r2_available = self.castling_available_r2_black

        before_action_king_in_check = self.king_in_check(board)
        q_values = self.neuralNetwork.model.predict(self.preprosess_input(board))
        action_index = self.POSSIBLE_MOVES.index(action)

        action_piece, target_tile_piece, source_tile_indices, target_tile_indices, = self.get_action_piece_tiles(board, action) # Returns None,None,None,None if action_piece not present                                                                                                                   # on board
        #----------------------------------------------------------------------------------------------------------------
        # Checking for Invalid Moves

        if action_piece == None:  

            action_info = {"Invalid Move, Action Piece Not Present on Board"}
            return self.invalid_action(action_info, q_values, action_index)


        if target_tile_indices[0]>7 or target_tile_indices[1]>7 or target_tile_indices[0]<0 or target_tile_indices[1]<0:
            
            action_info = {"Invalid Move, Target Tile Location Out of Range"}
            return self.invalid_action(action_info, q_values, action_index)


        if target_tile_piece[0] != "o" and target_tile_piece[0] != "_":
            
            action_info = {"Invalid Move, Cannot Capture Piece that Belongs to Agent"}
            return self.invalid_action(action_info, q_values, action_index)


        if len(action) == 3 and target_tile_indices[0] != 0:

            action_info = {"Invalid Move, Cannot Promote Pawn If Target Tile is not on the Promoting Row"}
            return self.invalid_action(action_info, q_values, action_index)

        if action[0] == "k" :

            if action[1][1] == 2 and (not (board[7][7] == "r2") or source_tile_indices != [7,4]):
                
                action_info = {"Invalid Move, King Cannot Castle Unless King and Right Rook are in Starting Positions"}
                return self.invalid_action(action_info, q_values, action_index)


            if action[1][1] == -2 and (not (board[7][0] == "r1") or source_tile_indices != [7,4]):
                
                action_info = {"Invalid Move, King Cannot Castle Unless King and Left Rook are in Starting Positions"}
                return self.invalid_action(action_info, q_values, action_index)

            
            if before_action_king_in_check:
                
                action_info = {"Invalid Move, King Cannot Castle When in Check"}
                return self.invalid_action(action_info, q_values, action_index)

        
        if action[0][0] == "p":

            if action[1][0] == -2 and source_tile_indices[0]!=6:
                
                action_info = {"Invalid Move, Pawn Cannot Move 2 Spaces Unless in Starting Position"}
                return self.invalid_action(action_info, q_values, action_index)


            if action[1][1] != 0 and target_tile_piece == "_" and ( en_passant_location != target_tile_indices ):
                
                action_info = {"Invalid Move, Pawn Cannot Move Diagnally Unless Oppossing Piece is there or En Passant Condition is Met"}
                return self.invalid_action(action_info, q_values, action_index)


            if action[1][0] == -2 and source_tile_indices[0] == 6 and board[source_tile_indices[0]-1][source_tile_indices[1]] != "_":
                
                action_info = {"Invalid Move, Pawn Blocked by Other Piece in it's Path"}
                return self.invalid_action(action_info, q_values, action_index)


            if action[1][0] == -1 and target_tile_piece != "_":

                action_info = {"Invalid Move, Pawn Blocked by Other Piece in it's Path"}
                return self.invalid_action(action_info, q_values, action_index)

        
        if action[0][0] == "r" or action[0][0] == "q":

            if action[1][1] > 0:

                for index in range(1, action[1][1]):

                    if board[source_tile_indices[0]][source_tile_indices[1]+index] !=  "_":

                        action_info = {"Invalid Move, Rook or Queen Blocked by Other Piece in it's Path"}
                        return self.invalid_action(action_info, q_values, action_index)

                    
            if action[1][1] < 0:

                for index in range(1, -action[1][1]):

                    if board[source_tile_indices[0]][source_tile_indices[1]-index] !=  "_":

                        action_info = {"Invalid Move, Rook or Queen Blocked by Other Piece in it's Path"}
                        return self.invalid_action(action_info, q_values, action_index)

                
            if action[1][0] > 0:

                for index in range(1, action[1][0]):

                    if board[source_tile_indices[0]+index][source_tile_indices[1]] !=  "_":
                        
                        action_info = {"Invalid Move, Rook or Queen Blocked by Other Piece in it's Path"}
                        return self.invalid_action(action_info, q_values, action_index)

                        
            if action[1][0] < 0:

                for index in range(1, -action[1][0]):

                    if board[source_tile_indices[0]-index][source_tile_indices[1]-index] !=  "_":

                        action_info = {"Invalid Move, Rook or Queen Blocked by Other Piece in it's Path"}
                        return self.invalid_action(action_info, q_values, action_index)


        if action[0][0] == "b" or action[0][0] == "q": 

            if action[1][0] > 0 and action[1][1] > 0:

                for index in range(1, action[1][0]):

                    if board[source_tile_indices[0]+index][source_tile_indices[1]+index] !=  "_":

                        action_info = {"Invalid Move, Bishop or Queen Blocked by Other Piece in it's Path"}
                        return self.invalid_action(action_info, q_values, action_index)

                    
            if action[1][0] > 0 and action[1][1] < 0:

                for index in range(1, action[1][0]):

                    if board[source_tile_indices[0]+index][source_tile_indices[1]-index] !=  "_":

                        action_info = {"Invalid Move, Bishop or Queen Blocked by Other Piece in it's Path"}
                        return self.invalid_action(action_info, q_values, action_index)


            if action[1][0] < 0 and action[1][1] > 0:

                for index in range(1, -action[1][0]):

                    if board[source_tile_indices[0]-index][source_tile_indices[1]+index] !=  "_":

                        action_info = {"Invalid Move, Bishop or Queen Blocked by Other Piece in it's Path"}
                        return self.invalid_action(action_info, q_values, action_index)


            if action[1][0] < 0 and action[1][1] < 0:

                for index in range(1, -action[1][0]):

                    if board[source_tile_indices[0]-index][source_tile_indices[1]-index] !=  "_":

                        action_info = {"Invalid Move, Bishop or Queen Blocked by Other Piece in it's Path"}
                        return self.invalid_action(action_info, q_values, action_index)

        #----------------------------------------------------------------------------------------------------------------
        # Checking for Valid Moves

        # Valid Castling Condition
        if action[0] == "k" and not before_action_king_in_check:

            if action[1][1] == 2 and castling_r2_available:
                
                castled_rook = board[7][7]
                board[target_tile_indices[0]][target_tile_indices[1]] = action[0]
                board[source_tile_indices[0]][source_tile_indices[1]] = "_"
                board[7][7] = "_"
                board[7][5] = castled_rook

                if self.king_in_check(board):
                    action_info = {"Invalid Move, King in Check After Action"}
                    return self.invalid_action(action_info, q_values, action_index)

                action_info = {"Valid Move, Castling With r2 Rook"}
                action_reward = 100.0
                self.board_state = board
                self.move_history_cn.append(self.tile_indices_to_coordinates(source_tile_indices,target_tile_indices))
                self.en_passant_tile = None

                if self.perspective == "w":
                    self.castling_available_r1_white = False
                    self.castling_available_r2_white = False
                else:
                    self.castling_available_r1_black = False
                    self.castling_available_r2_black = False
     
                return self.valid_action(action_info, action_reward, action, q_values, action_index, target_tile_piece)


            if action[1][1] == -2 and castling_r1_available:

                castled_rook = board[7][0]
                board[target_tile_indices[0]][target_tile_indices[1]] = action[0]
                board[source_tile_indices[0]][source_tile_indices[1]] = "_"
                board[7][0] = "_"
                board[7][3] = castled_rook

                if self.king_in_check(board):
                    action_info = {"Invalid Move, King in Check After Action"}
                    return self.invalid_action(action_info, q_values, action_index)

                action_info = {"Valid Move, Castling With r1 Rook"}
                action_reward = 100.0
                self.board_state = board
                self.move_history_cn.append(self.tile_indices_to_coordinates(source_tile_indices,target_tile_indices))
                self.en_passant_tile = None

                if self.perspective == "w":
                    self.castling_available_r1_white = False
                    self.castling_available_r2_white = False
                else:
                    self.castling_available_r1_black = False
                    self.castling_available_r2_black = False
                
                return self.valid_action(action_info, action_reward, action, q_values, action_index, target_tile_piece)


        if action[0][0] == "p" and action[1][0] == -2:                      # Valid Pawn Starting Move 2 Spaces, Activating En Passant Conditional

            board[target_tile_indices[0]][target_tile_indices[1]] = action[0]
            board[source_tile_indices[0]][source_tile_indices[1]] = "_"

            if self.king_in_check(board):
                    action_info = {"Invalid Move, King in Check After Action"}
                    return self.invalid_action(action_info, q_values, action_index)

            action_info = {"Valid Move, Pawn Moved Two Spaces From Starting Position, Activating En Passant Condition"}
            action_reward = 0.0
            self.board_state = board
            self.move_history_cn.append(self.tile_indices_to_coordinates(source_tile_indices,target_tile_indices))
            self.en_passant_tile = [2,abs(7-target_tile_indices[1])]

            return self.valid_action(action_info, action_reward, action, q_values, action_index, target_tile_piece)
        

        if len(action) == 3 and target_tile_indices[0] == 0:     # Valid Move, Pawn Promotion Attempt

            if action[2] == "q":

                board[target_tile_indices[0]][target_tile_indices[1]] = "q" + str(number_of_next_queen)
                board[source_tile_indices[0]][source_tile_indices[1]] = "_"

                if self.king_in_check(board):
                    action_info = {"Invalid Move, King in Check After Action"}
                    return self.invalid_action(action_info, q_values, action_index)

                action_info = {"Valid Move, Pawn Promoted to Queen"}
                action_reward = 90.0
                self.board_state = board
                self.move_history_cn.append(self.tile_indices_to_coordinates(source_tile_indices,target_tile_indices))
                self.en_passant_tile = None

                if self.perspective == "w":
                    self.number_of_next_queen_white+=1
                else:
                    self.number_of_next_queen_black+=1

                return self.valid_action(action_info, action_reward, action, q_values, action_index, target_tile_piece)

                
            if action[2] == "n":

                board[target_tile_indices[0]][target_tile_indices[1]] = "n" + str(number_of_next_knight)
                board[source_tile_indices[0]][source_tile_indices[1]] = "_"

                if self.king_in_check(board):
                    action_info = {"Invalid Move, King in Check After Action"}
                    return self.invalid_action(action_info, q_values, action_index)

                action_info = {"Valid Move, Pawn Promoted to Knight"}
                action_reward = 30.0
                self.board_state = board
                self.move_history_cn.append(self.tile_indices_to_coordinates(source_tile_indices,target_tile_indices))
                self.en_passant_tile = None

                if self.perspective == "w":
                    self.number_of_next_knight_white+=1
                else:
                    self.number_of_next_knight_black+=1

                return self.valid_action(action_info, action_reward, action, q_values, action_index, target_tile_piece)


            if action[2] == "b":

                board[target_tile_indices[0]][target_tile_indices[1]] = "b" + str(number_of_next_bishop)
                board[source_tile_indices[0]][source_tile_indices[1]] = "_"

                if self.king_in_check(board):
                    action_info = {"Invalid Move, King in Check After Action"}
                    return self.invalid_action(action_info, q_values, action_index)

                action_info = {"Valid Move, Pawn Promoted to Bishop"}
                action_reward = 30.0
                self.board_state = board
                self.move_history_cn.append(self.tile_indices_to_coordinates(source_tile_indices,target_tile_indices))
                self.en_passant_tile = None

                if self.perspective == "w":
                    self.number_of_next_bishop_white+=1
                else:
                    self.number_of_next_bishop_black+=1

                return self.valid_action(action_info, action_reward, action, q_values, action_index, target_tile_piece)
            
            if action[2] == "r":

                board[target_tile_indices[0]][target_tile_indices[1]] = "r" + str(number_of_next_rook)
                board[source_tile_indices[0]][source_tile_indices[1]] = "_"

                if self.king_in_check(board):
                    action_info = {"Invalid Move, King in Check After Action"}
                    return self.invalid_action(action_info, q_values, action_index)

                action_info = {"Valid Move, Pawn Promoted to Rook"}
                action_reward = 50.0
                self.board_state = board
                self.move_history_cn.append(self.tile_indices_to_coordinates(source_tile_indices,target_tile_indices))
                self.en_passant_tile = None

                if self.perspective == "w":
                    self.number_of_next_rook_white+=1
                else:
                    self.number_of_next_rook_black+=1

                return self.valid_action(action_info, action_reward, action, q_values, action_index, target_tile_piece)
            

        if target_tile_piece == "_":    # Valid Move, Non-Special Target Tile is Empty Tile Move

            board[target_tile_indices[0]][target_tile_indices[1]] = action[0]
            board[source_tile_indices[0]][source_tile_indices[1]] = "_"

            action_info = {"Valid Move, Non-Special Target Tile is Empty Tile Move"}
            action_reward = 0.0

    
        if target_tile_piece[0:2] == "op":  # Valid Move, Captured Opponent Pawn

            board[target_tile_indices[0]][target_tile_indices[1]] = action[0]
            board[source_tile_indices[0]][source_tile_indices[1]] = "_"

            action_info = {"Valid Move, Captured Opponent Pawn"}
            action_reward = 1.0


        if target_tile_piece[0:2] == "on":  # Valid Move, Captured Opponent Knight

            board[target_tile_indices[0]][target_tile_indices[1]] = action[0]
            board[source_tile_indices[0]][source_tile_indices[1]] = "_"

            action_info = {"Valid Move, Captured Opponent Knight"}
            action_reward = 30.0

            
        if target_tile_piece[0:2] == "ob":  # Valid Move, Captured Opponent Bishop

            board[target_tile_indices[0]][target_tile_indices[1]] = action[0]
            board[source_tile_indices[0]][source_tile_indices[1]] = "_"

            action_info = {"Valid Move, Captured Opponent Bishop"}
            action_reward = 30.0

            
        if target_tile_piece[0:2] == "or":  # Valid Move, Captured Opponent Rook

            board[target_tile_indices[0]][target_tile_indices[1]] = action[0]
            board[source_tile_indices[0]][source_tile_indices[1]] = "_"

            action_info = {"Valid Move, Captured Opponent Rook"}
            action_reward = 50.0

            
        if target_tile_piece[0:2] == "oq":  # Valid Move, Captured Opponent Queen

            board[target_tile_indices[0]][target_tile_indices[1]] = action[0]
            board[source_tile_indices[0]][source_tile_indices[1]] = "_"

            action_info = {"Valid Move, Captured Opponent Queen"}
            action_reward = 90.0


        if target_tile_piece == "ok":

            board[target_tile_indices[0]][target_tile_indices[1]] = action[0]
            board[source_tile_indices[0]][source_tile_indices[1]] = "_"

            action_info = {"Valid Move, Captured Opponent King"}
            action_reward = 100000.0


        if self.king_in_check(board):
                    action_info = {"Invalid Move, King in Check After Action"}
                    return self.invalid_action(action_info, q_values, action_index)

        self.move_history_cn.append(self.tile_indices_to_coordinates(source_tile_indices,target_tile_indices))
        self.en_passant_tile = None

        if self.perspective == "w":
            if action[0] == "r1":
                self.castling_available_r1_white = False
            if action[0] == "r2":
                self.castling_available_r2_white = False
            if action[0] == "k":
                self.castling_available_r2_white = False
        else:
            if action[0] == "r1":
                self.castling_available_r1_black = False
            if action[0] == "r2":
                self.castling_available_r2_black = False
            if action[0] == "k":
                self.castling_available_r2_black = False
        
        return self.valid_action(action_info, action_reward, action, q_values, action_index, target_tile_piece)

###############################################################################################################################################################
