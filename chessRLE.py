# Library Imports
import chessANN
import numpy as np
from typing import List



###############################################################################################################################################################
# Reinforcment Learning Enviorment - Version 2.0 (21/11/2023)
###############################################################################################################################################################

class RLE():
    """
    The RLE class represents a Reinforcement Learning Environment for chess.

    Attributes:
        - neuralNetwork (object): An instance of the neuralNetwork class used for decision-making.
        - board_white_perspective (list): 2d list representing the current chessboard state from the white player's perspective.
        - board_black_perspective (list): 2d list representing the current chessboard state  from the black player's perspective.
        - PIECE_LABELS_OPPONENTS_PERSPECTIVE (dict): Mapping of piece labels to their opponents' perspective labels.
        - PIECE_LABELS_INTEGER_TO_STRING (dict): Mapping of piece integer labels to their string representations.
        - PIECE_LABELS_STRING_TO_INTEGER (dict): Mapping of piece string labels to their integer representations.
        - POSSIBLE_MOVES (list): List of possible chess moves that could be made by the chess agent/engine.

    Methods:
        - __init__(): Initializes the RLE object.
        - reverse_board_perspective(self, board: List[str]) -> List[str]: Returns the Reversed board perspective to that of the opposite player's.
    """
    def __init__(self):
        
        self.neuralNetwork = chessANN.neuralNetwork()

        self.board_white_perspective = [["or2","on2","ob2","oq1","ok","ob1","on1","or1"],
                ["op8","op7","op6","op5","op4","op3","op2","op1"],
                ["_","_","_","_","_","_","_","_"],
                ["_","_","_","_","_","_","_","_"],
                ["_","_","_","_","_","_","_","_"],
                ["_","_","_","_","_","_","_","_"],
                ["p1","p2","p3","p4","p5","p6","p7","p8"],
                ["r1","n1","b1","q1","k","b2","n2","r2"]]
        self.board_black_perspective = [["or2","on2","ob2","oq","ok","ob1","on1","or1"],
                ["op8","op7","op6","op5","op4","op3","op2","op1"],
                ["_","_","_","_","_","_","_","_"],
                ["_","_","_","_","_","_","_","_"],
                ["_","_","_","_","_","_","_","_"],
                ["_","_","_","_","_","_","_","_"],
                ["p1","p2","p3","p4","p5","p6","p7","p8"],
                ["r1","n1","b1","q1","k","b2","n2","r2"]]
        

        self.PIECE_LABELS_OPPONENTS_PERSPECTIVE = {
            "_":"_",
            "p1": "op1", "p2": "op2", "p3": "op3", "p4": "op4", "p5": "op5", "p6": "op6", "p7": "op7", "p8": "op8",
            "n1": "on1", "n2": "on2", "n3": "on3", "n4": "on4", "n5": "on5", "n6": "on6", "n7": "on7", "n8": "on8", "n9": "on9", "n10": "on10",
            "b1": "ob1", "b2": "ob2", "b3": "ob3", "b4": "ob4", "b5": "ob5", "b6": "ob6", "b7": "ob7", "b8": "ob8", "b9": "ob9", "b10": "ob10",
            "r1": "or1", "r2": "or2", "r3": "or3", "r4": "or4", "r5": "or5", "r6": "or6", "r7": "or7", "r8": "or8", "r9": "or9", "r10": "or10",
            "q1": "oq1", "q2": "oq2", "q3": "oq3", "q4": "oq4", "q5": "oq5", "q6": "oq6", "q7": "oq7", "q8": "oq8", "q9": "oq9",
            "k": "ok",
        }
        self.PIECE_LABELS_INTEGER_TO_STRING = {
            0:"_",

            1:"p1", 2:"p2", 3:"p3", 4:"p4", 5:"p5", 6:"p6", 7:"p7", 8:"p8",
            -1:"op1", -2:"op2", -3:"op3", -4:"op4", -5:"op5", -6:"op6", -7:"op7", -8:"op8",

            10:"n1", 11:"n2", 12:"n3", 13:"n4", 14:"n5", 15:"n6", 16:"n7", 17:"n8", 18:"n9", 19:"n10",
            -10:"on1", -11:"on2", -12:"on3", -13:"on4", -14:"on5", -15:"on6", -16:"on7", -17:"on8", -18:"on9", -19:"on10",

            20:"b1", 21:"b2", 22:"b3", 23:"b4", 24:"b5", 25:"b6", 26:"b7", 27:"b8", 28:"b9", 29:"b10",
            -20:"ob1", -21:"ob2", -22:"ob3", -23:"ob4", -24:"ob5", -25:"ob6", -26:"ob7", -27:"ob8", -28:"ob9", -29:"ob10",

            30:"r1", 31:"r2", 32:"r3", 33:"r4", 34:"r5", 35:"r6", 36:"r7", 37:"r8", 38:"r9", 39:"r10",
            -30:"or1", -31:"or2", -32:"or3", -33:"or4", -34:"or5", -35:"or6", -36:"or7", -37:"or8", -38:"or9", -39:"or10",

            40:"q1", 41:"q2", 42:"q3", 43:"q4", 44:"q5", 45:"q6", 46:"q7", 47:"q8", 48:"q9", 49:"q10",
            -40:"oq1", -41:"oq2", -42:"oq3", -43:"oq4", -44:"oq5", -45:"oq6", -46:"oq7", -47:"oq8", -48:"oq9", -49:"oq10",

            50:"k",
            -50:"ok",
        }
        self.PIECE_LABELS_STRING_TO_INTEGER = {
            "_":0, 

            "p1": 1, "p2": 2, "p3": 3, "p4": 4, "p5": 5, "p6": 6, "p7": 7, "p8": 8,
            "op1": -1, "op2": -2, "op3": -3, "op4": -4, "op5": -5, "op6": -6, "op7": -7, "op8": -8,

            "n1": 10, "n2": 11, "n3": 12, "n4": 13, "n5": 14, "n6": 15, "n7": 16, "n8": 17, "n9": 18, "n10": 19,
            "on1": -10, "on2": -11, "on3": -12, "on4": -13, "on5": -14, "on6": -15, "on7": -16, "on8": -17, "on9": -18, "on10": -19,

            "b1": 20, "b2": 21, "b3": 22, "b4": 23, "b5": 24, "b6": 25, "b7": 26, "b8": 27, "b9": 28, "b10": 29,
            "ob1": -20, "ob2": -21, "ob3": -22, "ob4": -23, "ob5": -24, "ob6": -25, "ob7": -26, "ob8": -27, "ob9": -28, "ob10": -29,

            "r1": 30, "r2": 31, "r3": 32, "r4": 33, "r5": 34, "r6": 35, "r7": 36, "r8": 37, "r9": 38, "r10": 39,
            "or1": -30, "or2": -31, "or3": -32, "or4": -33, "or5": -34, "or6": -35, "or7": -36, "or8": -37, "or9": -38, "or10": -39,

            "q1": 40, "q2": 41, "q3": 42, "q4": 43, "q5": 44, "q6": 45, "q7": 46, "q8": 47, "q9": 48,
            "oq1": -40, "oq2": -41, "oq3": -42, "oq4": -43, "oq5": -44, "oq6": -45, "oq7": -46, "oq8": -47, "oq9": -48,

            "k":50,
            "ok":-50,
        }
        self.POSSIBLE_MOVES = [   
                ("p1", (-1, 0)),
                ("p1", (-1, -1)),
                ("p1", (-1, 1)),
                ("p1", (-2, 0)),

                ("p2", (-1, 0)),
                ("p2", (-1, -1)),
                ("p2", (-1, 1)),
                ("p2", (-2, 0)),

                ("p3", (-1, 0)),
                ("p3", (-1, -1)),
                ("p3", (-1, 1)),
                ("p3", (-2, 0)),

                ("p4", (-1, 0)),
                ("p4", (-1, -1)),
                ("p4", (-1, 1)),
                ("p4", (-2, 0)),

                ("p5", (-1, 0)),
                ("p5", (-1, -1)),
                ("p5", (-1, 1)),
                ("p5", (-2, 0)),

                ("p6", (-1, 0)),
                ("p6", (-1, -1)),
                ("p6", (-1, 1)),
                ("p6", (-2, 0)),

                ("p7", (-1, 0)),
                ("p7", (-1, -1)),
                ("p7", (-1, 1)),
                ("p7", (-2, 0)),

                ("p8", (-1, 0)),
                ("p8", (-1, -1)),
                ("p8", (-1, 1)),
                ("p8", (-2, 0)),
                

                ("n1", (2, 1)),
                ("n1", (1, 2)),
                ("n1", (-2, 1)),
                ("n1", (-1, 2)),
                ("n1", (2, -1)),
                ("n1", (1, -2)),
                ("n1", (-2, -1)),
                ("n1", (-1, -2)),

                ("n2", (2, 1)),
                ("n2", (1, 2)),
                ("n2", (-2, 1)),
                ("n2", (-1, 2)),
                ("n2", (2, -1)),
                ("n2", (1, -2)),
                ("n2", (-2, -1)),
                ("n2", (-1, -2)),

                ("n3", (2, 1)),
                ("n3", (1, 2)),
                ("n3", (-2, 1)),
                ("n3", (-1, 2)),
                ("n3", (2, -1)),
                ("n3", (1, -2)),
                ("n3", (-2, -1)),
                ("n3", (-1, -2)),

                ("n4", (2, 1)),
                ("n4", (1, 2)),
                ("n4", (-2, 1)),
                ("n4", (-1, 2)),
                ("n4", (2, -1)),
                ("n4", (1, -2)),
                ("n4", (-2, -1)),
                ("n4", (-1, -2)),

                ("n5", (2, 1)),
                ("n5", (1, 2)),
                ("n5", (-2, 1)),
                ("n5", (-1, 2)),
                ("n5", (2, -1)),
                ("n5", (1, -2)),
                ("n5", (-2, -1)),
                ("n5", (-1, -2)),

                ("n6", (2, 1)),
                ("n6", (1, 2)),
                ("n6", (-2, 1)),
                ("n6", (-1, 2)),
                ("n6", (2, -1)),
                ("n6", (1, -2)),
                ("n6", (-2, -1)),
                ("n6", (-1, -2)),

                ("n7", (2, 1)),
                ("n7", (1, 2)),
                ("n7", (-2, 1)),
                ("n7", (-1, 2)),
                ("n7", (2, -1)),
                ("n7", (1, -2)),
                ("n7", (-2, -1)),
                ("n7", (-1, -2)),

                ("n8", (2, 1)),
                ("n8", (1, 2)),
                ("n8", (-2, 1)),
                ("n8", (-1, 2)),
                ("n8", (2, -1)),
                ("n8", (1, -2)),
                ("n8", (-2, -1)),
                ("n8", (-1, -2)),

                ("n9", (2, 1)),
                ("n9", (1, 2)),
                ("n9", (-2, 1)),
                ("n9", (-1, 2)),
                ("n9", (2, -1)),
                ("n9", (1, -2)),
                ("n9", (-2, -1)),
                ("n9", (-1, -2)),

                ("n10", (2, 1)),
                ("n10", (1, 2)),
                ("n10", (-2, 1)),
                ("n10", (-1, 2)),
                ("n10", (2, -1)),
                ("n10", (1, -2)),
                ("n10", (-2, -1)),
                ("n10", (-1, -2)),


                ("b1", (-1, 1)),
                ("b1", (-2, 2)),
                ("b1", (-3, 3)),
                ("b1", (-4, 4)),
                ("b1", (-5, 5)),
                ("b1", (-6, 6)),
                ("b1", (-7, 7)),
                ("b1", (1, -1)),
                ("b1", (2, -2)),
                ("b1", (3, -3)),
                ("b1", (4, -4)),
                ("b1", (5, -5)),
                ("b1", (6, -6)),
                ("b1", (7, -7)),
                ("b1", (-1, -1)),
                ("b1", (-2, -2)),
                ("b1", (-3, -3)),
                ("b1", (-4, -4)),
                ("b1", (-5, -5)),
                ("b1", (-6, -6)),
                ("b1", (-7, -7)),
                ("b1", (1, 1)),
                ("b1", (2, 2)),
                ("b1", (3, 3)),
                ("b1", (4, 4)),
                ("b1", (5, 5)),
                ("b1", (6, 6)),
                ("b1", (7, 7)),

                ("b2", (-1, 1)),
                ("b2", (-2, 2)),
                ("b2", (-3, 3)),
                ("b2", (-4, 4)),
                ("b2", (-5, 5)),
                ("b2", (-6, 6)),
                ("b2", (-7, 7)),
                ("b2", (1, -1)),
                ("b2", (2, -2)),
                ("b2", (3, -3)),
                ("b2", (4, -4)),
                ("b2", (5, -5)),
                ("b2", (6, -6)),
                ("b2", (7, -7)),
                ("b2", (-1, -1)),
                ("b2", (-2, -2)),
                ("b2", (-3, -3)),
                ("b2", (-4, -4)),
                ("b2", (-5, -5)),
                ("b2", (-6, -6)),
                ("b2", (-7, -7)),
                ("b2", (1, 1)),
                ("b2", (2, 2)),
                ("b2", (3, 3)),
                ("b2", (4, 4)),
                ("b2", (5, 5)),
                ("b2", (6, 6)),
                ("b2", (7, 7)),

                ("b3", (-1, 1)),
                ("b3", (-2, 2)),
                ("b3", (-3, 3)),
                ("b3", (-4, 4)),
                ("b3", (-5, 5)),
                ("b3", (-6, 6)),
                ("b3", (-7, 7)),
                ("b3", (1, -1)),
                ("b3", (2, -2)),
                ("b3", (3, -3)),
                ("b3", (4, -4)),
                ("b3", (5, -5)),
                ("b3", (6, -6)),
                ("b3", (7, -7)),
                ("b3", (-1, -1)),
                ("b3", (-2, -2)),
                ("b3", (-3, -3)),
                ("b3", (-4, -4)),
                ("b3", (-5, -5)),
                ("b3", (-6, -6)),
                ("b3", (-7, -7)),
                ("b3", (1, 1)),
                ("b3", (2, 2)),
                ("b3", (3, 3)),
                ("b3", (4, 4)),
                ("b3", (5, 5)),
                ("b3", (6, 6)),
                ("b3", (7, 7)),

                ("b4", (-1, 1)),
                ("b4", (-2, 2)),
                ("b4", (-3, 3)),
                ("b4", (-4, 4)),
                ("b4", (-5, 5)),
                ("b4", (-6, 6)),
                ("b4", (-7, 7)),
                ("b4", (1, -1)),
                ("b4", (2, -2)),
                ("b4", (3, -3)),
                ("b4", (4, -4)),
                ("b4", (5, -5)),
                ("b4", (6, -6)),
                ("b4", (7, -7)),
                ("b4", (-1, -1)),
                ("b4", (-2, -2)),
                ("b4", (-3, -3)),
                ("b4", (-4, -4)),
                ("b4", (-5, -5)),
                ("b4", (-6, -6)),
                ("b4", (-7, -7)),
                ("b4", (1, 1)),
                ("b4", (2, 2)),
                ("b4", (3, 3)),
                ("b4", (4, 4)),
                ("b4", (5, 5)),
                ("b4", (6, 6)),
                ("b4", (7, 7)),

                ("b5", (-1, 1)),
                ("b5", (-2, 2)),
                ("b5", (-3, 3)),
                ("b5", (-4, 4)),
                ("b5", (-5, 5)),
                ("b5", (-6, 6)),
                ("b5", (-7, 7)),
                ("b5", (1, -1)),
                ("b5", (2, -2)),
                ("b5", (3, -3)),
                ("b5", (4, -4)),
                ("b5", (5, -5)),
                ("b5", (6, -6)),
                ("b5", (7, -7)),
                ("b5", (-1, -1)),
                ("b5", (-2, -2)),
                ("b5", (-3, -3)),
                ("b5", (-4, -4)),
                ("b5", (-5, -5)),
                ("b5", (-6, -6)),
                ("b5", (-7, -7)),
                ("b5", (1, 1)),
                ("b5", (2, 2)),
                ("b5", (3, 3)),
                ("b5", (4, 4)),
                ("b5", (5, 5)),
                ("b5", (6, 6)),
                ("b5", (7, 7)),

                ("b6", (-1, 1)),
                ("b6", (-2, 2)),
                ("b6", (-3, 3)),
                ("b6", (-4, 4)),
                ("b6", (-5, 5)),
                ("b6", (-6, 6)),
                ("b6", (-7, 7)),
                ("b6", (1, -1)),
                ("b6", (2, -2)),
                ("b6", (3, -3)),
                ("b6", (4, -4)),
                ("b6", (5, -5)),
                ("b6", (6, -6)),
                ("b6", (7, -7)),
                ("b6", (-1, -1)),
                ("b6", (-2, -2)),
                ("b6", (-3, -3)),
                ("b6", (-4, -4)),
                ("b6", (-5, -5)),
                ("b6", (-6, -6)),
                ("b6", (-7, -7)),
                ("b6", (1, 1)),
                ("b6", (2, 2)),
                ("b6", (3, 3)),
                ("b6", (4, 4)),
                ("b6", (5, 5)),
                ("b6", (6, 6)),
                ("b6", (7, 7)),

                ("b7", (-1, 1)),
                ("b7", (-2, 2)),
                ("b7", (-3, 3)),
                ("b7", (-4, 4)),
                ("b7", (-5, 5)),
                ("b7", (-6, 6)),
                ("b7", (-7, 7)),
                ("b7", (1, -1)),
                ("b7", (2, -2)),
                ("b7", (3, -3)),
                ("b7", (4, -4)),
                ("b7", (5, -5)),
                ("b7", (6, -6)),
                ("b7", (7, -7)),
                ("b7", (-1, -1)),
                ("b7", (-2, -2)),
                ("b7", (-3, -3)),
                ("b7", (-4, -4)),
                ("b7", (-5, -5)),
                ("b7", (-6, -6)),
                ("b7", (-7, -7)),
                ("b7", (1, 1)),
                ("b7", (2, 2)),
                ("b7", (3, 3)),
                ("b7", (4, 4)),
                ("b7", (5, 5)),
                ("b7", (6, 6)),
                ("b7", (7, 7)),

                ("b8", (-1, 1)),
                ("b8", (-2, 2)),
                ("b8", (-3, 3)),
                ("b8", (-4, 4)),
                ("b8", (-5, 5)),
                ("b8", (-6, 6)),
                ("b8", (-7, 7)),
                ("b8", (1, -1)),
                ("b8", (2, -2)),
                ("b8", (3, -3)),
                ("b8", (4, -4)),
                ("b8", (5, -5)),
                ("b8", (6, -6)),
                ("b8", (7, -7)),
                ("b8", (-1, -1)),
                ("b8", (-2, -2)),
                ("b8", (-3, -3)),
                ("b8", (-4, -4)),
                ("b8", (-5, -5)),
                ("b8", (-6, -6)),
                ("b8", (-7, -7)),
                ("b8", (1, 1)),
                ("b8", (2, 2)),
                ("b8", (3, 3)),
                ("b8", (4, 4)),
                ("b8", (5, 5)),
                ("b8", (6, 6)),
                ("b8", (7, 7)),

                ("b9", (-1, 1)),
                ("b9", (-2, 2)),
                ("b9", (-3, 3)),
                ("b9", (-4, 4)),
                ("b9", (-5, 5)),
                ("b9", (-6, 6)),
                ("b9", (-7, 7)),
                ("b9", (1, -1)),
                ("b9", (2, -2)),
                ("b9", (3, -3)),
                ("b9", (4, -4)),
                ("b9", (5, -5)),
                ("b9", (6, -6)),
                ("b9", (7, -7)),
                ("b9", (-1, -1)),
                ("b9", (-2, -2)),
                ("b9", (-3, -3)),
                ("b9", (-4, -4)),
                ("b9", (-5, -5)),
                ("b9", (-6, -6)),
                ("b9", (-7, -7)),
                ("b9", (1, 1)),
                ("b9", (2, 2)),
                ("b9", (3, 3)),
                ("b9", (4, 4)),
                ("b9", (5, 5)),
                ("b9", (6, 6)),
                ("b9", (7, 7)),

                ("b10", (-1, 1)),
                ("b10", (-2, 2)),
                ("b10", (-3, 3)),
                ("b10", (-4, 4)),
                ("b10", (-5, 5)),
                ("b10", (-6, 6)),
                ("b10", (-7, 7)),
                ("b10", (1, -1)),
                ("b10", (2, -2)),
                ("b10", (3, -3)),
                ("b10", (4, -4)),
                ("b10", (5, -5)),
                ("b10", (6, -6)),
                ("b10", (7, -7)),
                ("b10", (-1, -1)),
                ("b10", (-2, -2)),
                ("b10", (-3, -3)),
                ("b10", (-4, -4)),
                ("b10", (-5, -5)),
                ("b10", (-6, -6)),
                ("b10", (-7, -7)),
                ("b10", (1, 1)),
                ("b10", (2, 2)),
                ("b10", (3, 3)),
                ("b10", (4, 4)),
                ("b10", (5, 5)),
                ("b10", (6, 6)),
                ("b10", (7, 7)),


                ("r1", (-1, 0)),
                ("r1", (-2, 0)),
                ("r1", (-3, 0)),
                ("r1", (-4, 0)),
                ("r1", (-5, 0)),
                ("r1", (-6, 0)),
                ("r1", (-7, 0)),
                ("r1", (1, 0)),
                ("r1", (2, 0)),
                ("r1", (3, 0)),
                ("r1", (4, 0)),
                ("r1", (5, 0)),
                ("r1", (6, 0)),
                ("r1", (7, 0)),
                ("r1", (0, 1)),
                ("r1", (0, 2)),
                ("r1", (0, 3)),
                ("r1", (0, 4)),
                ("r1", (0, 5)),
                ("r1", (0, 6)),
                ("r1", (0, 7)),
                ("r1", (0, -1)),
                ("r1", (0, -2)),
                ("r1", (0, -3)),
                ("r1", (0, -4)),
                ("r1", (0, -5)),
                ("r1", (0, -6)),
                ("r1", (0, -7)),

                ("r2", (-1, 0)),
                ("r2", (-2, 0)),
                ("r2", (-3, 0)),
                ("r2", (-4, 0)),
                ("r2", (-5, 0)),
                ("r2", (-6, 0)),
                ("r2", (-7, 0)),
                ("r2", (1, 0)),
                ("r2", (2, 0)),
                ("r2", (3, 0)),
                ("r2", (4, 0)),
                ("r2", (5, 0)),
                ("r2", (6, 0)),
                ("r2", (7, 0)),
                ("r2", (0, 1)),
                ("r2", (0, 2)),
                ("r2", (0, 3)),
                ("r2", (0, 4)),
                ("r2", (0, 5)),
                ("r2", (0, 6)),
                ("r2", (0, 7)),
                ("r2", (0, -1)),
                ("r2", (0, -2)),
                ("r2", (0, -3)),
                ("r2", (0, -4)),
                ("r2", (0, -5)),
                ("r2", (0, -6)),
                ("r2", (0, -7)),

                ("r3", (-1, 0)),
                ("r3", (-2, 0)),
                ("r3", (-3, 0)),
                ("r3", (-4, 0)),
                ("r3", (-5, 0)),
                ("r3", (-6, 0)),
                ("r3", (-7, 0)),
                ("r3", (1, 0)),
                ("r3", (2, 0)),
                ("r3", (3, 0)),
                ("r3", (4, 0)),
                ("r3", (5, 0)),
                ("r3", (6, 0)),
                ("r3", (7, 0)),
                ("r3", (0, 1)),
                ("r3", (0, 2)),
                ("r3", (0, 3)),
                ("r3", (0, 4)),
                ("r3", (0, 5)),
                ("r3", (0, 6)),
                ("r3", (0, 7)),
                ("r3", (0, -1)),
                ("r3", (0, -2)),
                ("r3", (0, -3)),
                ("r3", (0, -4)),
                ("r3", (0, -5)),
                ("r3", (0, -6)),
                ("r3", (0, -7)),

                ("r4", (-1, 0)),
                ("r4", (-2, 0)),
                ("r4", (-3, 0)),
                ("r4", (-4, 0)),
                ("r4", (-5, 0)),
                ("r4", (-6, 0)),
                ("r4", (-7, 0)),
                ("r4", (1, 0)),
                ("r4", (2, 0)),
                ("r4", (3, 0)),
                ("r4", (4, 0)),
                ("r4", (5, 0)),
                ("r4", (6, 0)),
                ("r4", (7, 0)),
                ("r4", (0, 1)),
                ("r4", (0, 2)),
                ("r4", (0, 3)),
                ("r4", (0, 4)),
                ("r4", (0, 5)),
                ("r4", (0, 6)),
                ("r4", (0, 7)),
                ("r4", (0, -1)),
                ("r4", (0, -2)),
                ("r4", (0, -3)),
                ("r4", (0, -4)),
                ("r4", (0, -5)),
                ("r4", (0, -6)),
                ("r4", (0, -7)),

                ("r5", (-1, 0)),
                ("r5", (-2, 0)),
                ("r5", (-3, 0)),
                ("r5", (-4, 0)),
                ("r5", (-5, 0)),
                ("r5", (-6, 0)),
                ("r5", (-7, 0)),
                ("r5", (1, 0)),
                ("r5", (2, 0)),
                ("r5", (3, 0)),
                ("r5", (4, 0)),
                ("r5", (5, 0)),
                ("r5", (6, 0)),
                ("r5", (7, 0)),
                ("r5", (0, 1)),
                ("r5", (0, 2)),
                ("r5", (0, 3)),
                ("r5", (0, 4)),
                ("r5", (0, 5)),
                ("r5", (0, 6)),
                ("r5", (0, 7)),
                ("r5", (0, -1)),
                ("r5", (0, -2)),
                ("r5", (0, -3)),
                ("r5", (0, -4)),
                ("r5", (0, -5)),
                ("r5", (0, -6)),
                ("r5", (0, -7)),

                ("r6", (-1, 0)),
                ("r6", (-2, 0)),
                ("r6", (-3, 0)),
                ("r6", (-4, 0)),
                ("r6", (-5, 0)),
                ("r6", (-6, 0)),
                ("r6", (-7, 0)),
                ("r6", (1, 0)),
                ("r6", (2, 0)),
                ("r6", (3, 0)),
                ("r6", (4, 0)),
                ("r6", (5, 0)),
                ("r6", (6, 0)),
                ("r6", (7, 0)),
                ("r6", (0, 1)),
                ("r6", (0, 2)),
                ("r6", (0, 3)),
                ("r6", (0, 4)),
                ("r6", (0, 5)),
                ("r6", (0, 6)),
                ("r6", (0, 7)),
                ("r6", (0, -1)),
                ("r6", (0, -2)),
                ("r6", (0, -3)),
                ("r6", (0, -4)),
                ("r6", (0, -5)),
                ("r6", (0, -6)),
                ("r6", (0, -7)),

                ("r7", (-1, 0)),
                ("r7", (-2, 0)),
                ("r7", (-3, 0)),
                ("r7", (-4, 0)),
                ("r7", (-5, 0)),
                ("r7", (-6, 0)),
                ("r7", (-7, 0)),
                ("r7", (1, 0)),
                ("r7", (2, 0)),
                ("r7", (3, 0)),
                ("r7", (4, 0)),
                ("r7", (5, 0)),
                ("r7", (6, 0)),
                ("r7", (7, 0)),
                ("r7", (0, 1)),
                ("r7", (0, 2)),
                ("r7", (0, 3)),
                ("r7", (0, 4)),
                ("r7", (0, 5)),
                ("r7", (0, 6)),
                ("r7", (0, 7)),
                ("r7", (0, -1)),
                ("r7", (0, -2)),
                ("r7", (0, -3)),
                ("r7", (0, -4)),
                ("r7", (0, -5)),
                ("r7", (0, -6)),
                ("r7", (0, -7)),

                ("r8", (-1, 0)),
                ("r8", (-2, 0)),
                ("r8", (-3, 0)),
                ("r8", (-4, 0)),
                ("r8", (-5, 0)),
                ("r8", (-6, 0)),
                ("r8", (-7, 0)),
                ("r8", (1, 0)),
                ("r8", (2, 0)),
                ("r8", (3, 0)),
                ("r8", (4, 0)),
                ("r8", (5, 0)),
                ("r8", (6, 0)),
                ("r8", (7, 0)),
                ("r8", (0, 1)),
                ("r8", (0, 2)),
                ("r8", (0, 3)),
                ("r8", (0, 4)),
                ("r8", (0, 5)),
                ("r8", (0, 6)),
                ("r8", (0, 7)),
                ("r8", (0, -1)),
                ("r8", (0, -2)),
                ("r8", (0, -3)),
                ("r8", (0, -4)),
                ("r8", (0, -5)),
                ("r8", (0, -6)),
                ("r8", (0, -7)),

                ("r9", (-1, 0)),
                ("r9", (-2, 0)),
                ("r9", (-3, 0)),
                ("r9", (-4, 0)),
                ("r9", (-5, 0)),
                ("r9", (-6, 0)),
                ("r9", (-7, 0)),
                ("r9", (1, 0)),
                ("r9", (2, 0)),
                ("r9", (3, 0)),
                ("r9", (4, 0)),
                ("r9", (5, 0)),
                ("r9", (6, 0)),
                ("r9", (7, 0)),
                ("r9", (0, 1)),
                ("r9", (0, 2)),
                ("r9", (0, 3)),
                ("r9", (0, 4)),
                ("r9", (0, 5)),
                ("r9", (0, 6)),
                ("r9", (0, 7)),
                ("r9", (0, -1)),
                ("r9", (0, -2)),
                ("r9", (0, -3)),
                ("r9", (0, -4)),
                ("r9", (0, -5)),
                ("r9", (0, -6)),
                ("r9", (0, -7)),

                ("r10", (-1, 0)),
                ("r10", (-2, 0)),
                ("r10", (-3, 0)),
                ("r10", (-4, 0)),
                ("r10", (-5, 0)),
                ("r10", (-6, 0)),
                ("r10", (-7, 0)),
                ("r10", (1, 0)),
                ("r10", (2, 0)),
                ("r10", (3, 0)),
                ("r10", (4, 0)),
                ("r10", (5, 0)),
                ("r10", (6, 0)),
                ("r10", (7, 0)),
                ("r10", (0, 1)),
                ("r10", (0, 2)),
                ("r10", (0, 3)),
                ("r10", (0, 4)),
                ("r10", (0, 5)),
                ("r10", (0, 6)),
                ("r10", (0, 7)),
                ("r10", (0, -1)),
                ("r10", (0, -2)),
                ("r10", (0, -3)),
                ("r10", (0, -4)),
                ("r10", (0, -5)),
                ("r10", (0, -6)),
                ("r10", (0, -7)),


                ("q1", (-1, 1)),
                ("q1", (-2, 2)),
                ("q1", (-3, 3)),
                ("q1", (-4, 4)),
                ("q1", (-5, 5)),
                ("q1", (-6, 6)),
                ("q1", (-7, 7)),
                ("q1", (1, -1)),
                ("q1", (2, -2)),
                ("q1", (3, -3)),
                ("q1", (4, -4)),
                ("q1", (5, -5)),
                ("q1", (6, -6)),
                ("q1", (7, -7)),
                ("q1", (-1, -1)),
                ("q1", (-2, -2)),
                ("q1", (-3, -3)),
                ("q1", (-4, -4)),
                ("q1", (-5, -5)),
                ("q1", (-6, -6)),
                ("q1", (-7, -7)),
                ("q1", (1, 1)),
                ("q1", (2, 2)),
                ("q1", (3, 3)),
                ("q1", (4, 4)),
                ("q1", (5, 5)),
                ("q1", (6, 6)),
                ("q1", (7, 7)),
                ("q1", (-1, 0)),
                ("q1", (-2, 0)),
                ("q1", (-3, 0)),
                ("q1", (-4, 0)),
                ("q1", (-5, 0)),
                ("q1", (-6, 0)),
                ("q1", (-7, 0)),
                ("q1", (1, 0)),
                ("q1", (2, 0)),
                ("q1", (3, 0)),
                ("q1", (4, 0)),
                ("q1", (5, 0)),
                ("q1", (6, 0)),
                ("q1", (7, 0)),
                ("q1", (0, 1)),
                ("q1", (0, 2)),
                ("q1", (0, 3)),
                ("q1", (0, 4)),
                ("q1", (0, 5)),
                ("q1", (0, 6)),
                ("q1", (0, 7)),
                ("q1", (0, -1)),
                ("q1", (0, -2)),
                ("q1", (0, -3)),
                ("q1", (0, -4)),
                ("q1", (0, -5)),
                ("q1", (0, -6)),
                ("q1", (0, -7)),

                ("q2", (-1, 1)),
                ("q2", (-2, 2)),
                ("q2", (-3, 3)),
                ("q2", (-4, 4)),
                ("q2", (-5, 5)),
                ("q2", (-6, 6)),
                ("q2", (-7, 7)),
                ("q2", (1, -1)),
                ("q2", (2, -2)),
                ("q2", (3, -3)),
                ("q2", (4, -4)),
                ("q2", (5, -5)),
                ("q2", (6, -6)),
                ("q2", (7, -7)),
                ("q2", (-1, -1)),
                ("q2", (-2, -2)),
                ("q2", (-3, -3)),
                ("q2", (-4, -4)),
                ("q2", (-5, -5)),
                ("q2", (-6, -6)),
                ("q2", (-7, -7)),
                ("q2", (1, 1)),
                ("q2", (2, 2)),
                ("q2", (3, 3)),
                ("q2", (4, 4)),
                ("q2", (5, 5)),
                ("q2", (6, 6)),
                ("q2", (7, 7)),
                ("q2", (-1, 0)),
                ("q2", (-2, 0)),
                ("q2", (-3, 0)),
                ("q2", (-4, 0)),
                ("q2", (-5, 0)),
                ("q2", (-6, 0)),
                ("q2", (-7, 0)),
                ("q2", (1, 0)),
                ("q2", (2, 0)),
                ("q2", (3, 0)),
                ("q2", (4, 0)),
                ("q2", (5, 0)),
                ("q2", (6, 0)),
                ("q2", (7, 0)),
                ("q2", (0, 1)),
                ("q2", (0, 2)),
                ("q2", (0, 3)),
                ("q2", (0, 4)),
                ("q2", (0, 5)),
                ("q2", (0, 6)),
                ("q2", (0, 7)),
                ("q2", (0, -1)),
                ("q2", (0, -2)),
                ("q2", (0, -3)),
                ("q2", (0, -4)),
                ("q2", (0, -5)),
                ("q2", (0, -6)),
                ("q2", (0, -7)),

                ("q3", (-1, 1)),
                ("q3", (-2, 2)),
                ("q3", (-3, 3)),
                ("q3", (-4, 4)),
                ("q3", (-5, 5)),
                ("q3", (-6, 6)),
                ("q3", (-7, 7)),
                ("q3", (1, -1)),
                ("q3", (2, -2)),
                ("q3", (3, -3)),
                ("q3", (4, -4)),
                ("q3", (5, -5)),
                ("q3", (6, -6)),
                ("q3", (7, -7)),
                ("q3", (-1, -1)),
                ("q3", (-2, -2)),
                ("q3", (-3, -3)),
                ("q3", (-4, -4)),
                ("q3", (-5, -5)),
                ("q3", (-6, -6)),
                ("q3", (-7, -7)),
                ("q3", (1, 1)),
                ("q3", (2, 2)),
                ("q3", (3, 3)),
                ("q3", (4, 4)),
                ("q3", (5, 5)),
                ("q3", (6, 6)),
                ("q3", (7, 7)),
                ("q3", (-1, 0)),
                ("q3", (-2, 0)),
                ("q3", (-3, 0)),
                ("q3", (-4, 0)),
                ("q3", (-5, 0)),
                ("q3", (-6, 0)),
                ("q3", (-7, 0)),
                ("q3", (1, 0)),
                ("q3", (2, 0)),
                ("q3", (3, 0)),
                ("q3", (4, 0)),
                ("q3", (5, 0)),
                ("q3", (6, 0)),
                ("q3", (7, 0)),
                ("q3", (0, 1)),
                ("q3", (0, 2)),
                ("q3", (0, 3)),
                ("q3", (0, 4)),
                ("q3", (0, 5)),
                ("q3", (0, 6)),
                ("q3", (0, 7)),
                ("q3", (0, -1)),
                ("q3", (0, -2)),
                ("q3", (0, -3)),
                ("q3", (0, -4)),
                ("q3", (0, -5)),
                ("q3", (0, -6)),
                ("q3", (0, -7)),

                ("q4", (-1, 1)),
                ("q4", (-2, 2)),
                ("q4", (-3, 3)),
                ("q4", (-4, 4)),
                ("q4", (-5, 5)),
                ("q4", (-6, 6)),
                ("q4", (-7, 7)),
                ("q4", (1, -1)),
                ("q4", (2, -2)),
                ("q4", (3, -3)),
                ("q4", (4, -4)),
                ("q4", (5, -5)),
                ("q4", (6, -6)),
                ("q4", (7, -7)),
                ("q4", (-1, -1)),
                ("q4", (-2, -2)),
                ("q4", (-3, -3)),
                ("q4", (-4, -4)),
                ("q4", (-5, -5)),
                ("q4", (-6, -6)),
                ("q4", (-7, -7)),
                ("q4", (1, 1)),
                ("q4", (2, 2)),
                ("q4", (3, 3)),
                ("q4", (4, 4)),
                ("q4", (5, 5)),
                ("q4", (6, 6)),
                ("q4", (7, 7)),
                ("q4", (-1, 0)),
                ("q4", (-2, 0)),
                ("q4", (-3, 0)),
                ("q4", (-4, 0)),
                ("q4", (-5, 0)),
                ("q4", (-6, 0)),
                ("q4", (-7, 0)),
                ("q4", (1, 0)),
                ("q4", (2, 0)),
                ("q4", (3, 0)),
                ("q4", (4, 0)),
                ("q4", (5, 0)),
                ("q4", (6, 0)),
                ("q4", (7, 0)),
                ("q4", (0, 1)),
                ("q4", (0, 2)),
                ("q4", (0, 3)),
                ("q4", (0, 4)),
                ("q4", (0, 5)),
                ("q4", (0, 6)),
                ("q4", (0, 7)),
                ("q4", (0, -1)),
                ("q4", (0, -2)),
                ("q4", (0, -3)),
                ("q4", (0, -4)),
                ("q4", (0, -5)),
                ("q4", (0, -6)),
                ("q4", (0, -7)),

                ("q5", (-1, 1)),
                ("q5", (-2, 2)),
                ("q5", (-3, 3)),
                ("q5", (-4, 4)),
                ("q5", (-5, 5)),
                ("q5", (-6, 6)),
                ("q5", (-7, 7)),
                ("q5", (1, -1)),
                ("q5", (2, -2)),
                ("q5", (3, -3)),
                ("q5", (4, -4)),
                ("q5", (5, -5)),
                ("q5", (6, -6)),
                ("q5", (7, -7)),
                ("q5", (-1, -1)),
                ("q5", (-2, -2)),
                ("q5", (-3, -3)),
                ("q5", (-4, -4)),
                ("q5", (-5, -5)),
                ("q5", (-6, -6)),
                ("q5", (-7, -7)),
                ("q5", (1, 1)),
                ("q5", (2, 2)),
                ("q5", (3, 3)),
                ("q5", (4, 4)),
                ("q5", (5, 5)),
                ("q5", (6, 6)),
                ("q5", (7, 7)),
                ("q5", (-1, 0)),
                ("q5", (-2, 0)),
                ("q5", (-3, 0)),
                ("q5", (-4, 0)),
                ("q5", (-5, 0)),
                ("q5", (-6, 0)),
                ("q5", (-7, 0)),
                ("q5", (1, 0)),
                ("q5", (2, 0)),
                ("q5", (3, 0)),
                ("q5", (4, 0)),
                ("q5", (5, 0)),
                ("q5", (6, 0)),
                ("q5", (7, 0)),
                ("q5", (0, 1)),
                ("q5", (0, 2)),
                ("q5", (0, 3)),
                ("q5", (0, 4)),
                ("q5", (0, 5)),
                ("q5", (0, 6)),
                ("q5", (0, 7)),
                ("q5", (0, -1)),
                ("q5", (0, -2)),
                ("q5", (0, -3)),
                ("q5", (0, -4)),
                ("q5", (0, -5)),
                ("q5", (0, -6)),
                ("q5", (0, -7)),

                ("q6", (-1, 1)),
                ("q6", (-2, 2)),
                ("q6", (-3, 3)),
                ("q6", (-4, 4)),
                ("q6", (-5, 5)),
                ("q6", (-6, 6)),
                ("q6", (-7, 7)),
                ("q6", (1, -1)),
                ("q6", (2, -2)),
                ("q6", (3, -3)),
                ("q6", (4, -4)),
                ("q6", (5, -5)),
                ("q6", (6, -6)),
                ("q6", (7, -7)),
                ("q6", (-1, -1)),
                ("q6", (-2, -2)),
                ("q6", (-3, -3)),
                ("q6", (-4, -4)),
                ("q6", (-5, -5)),
                ("q6", (-6, -6)),
                ("q6", (-7, -7)),
                ("q6", (1, 1)),
                ("q6", (2, 2)),
                ("q6", (3, 3)),
                ("q6", (4, 4)),
                ("q6", (5, 5)),
                ("q6", (6, 6)),
                ("q6", (7, 7)),
                ("q6", (-1, 0)),
                ("q6", (-2, 0)),
                ("q6", (-3, 0)),
                ("q6", (-4, 0)),
                ("q6", (-5, 0)),
                ("q6", (-6, 0)),
                ("q6", (-7, 0)),
                ("q6", (1, 0)),
                ("q6", (2, 0)),
                ("q6", (3, 0)),
                ("q6", (4, 0)),
                ("q6", (5, 0)),
                ("q6", (6, 0)),
                ("q6", (7, 0)),
                ("q6", (0, 1)),
                ("q6", (0, 2)),
                ("q6", (0, 3)),
                ("q6", (0, 4)),
                ("q6", (0, 5)),
                ("q6", (0, 6)),
                ("q6", (0, 7)),
                ("q6", (0, -1)),
                ("q6", (0, -2)),
                ("q6", (0, -3)),
                ("q6", (0, -4)),
                ("q6", (0, -5)),
                ("q6", (0, -6)),
                ("q6", (0, -7)),

                ("q7", (-1, 1)),
                ("q7", (-2, 2)),
                ("q7", (-3, 3)),
                ("q7", (-4, 4)),
                ("q7", (-5, 5)),
                ("q7", (-6, 6)),
                ("q7", (-7, 7)),
                ("q7", (1, -1)),
                ("q7", (2, -2)),
                ("q7", (3, -3)),
                ("q7", (4, -4)),
                ("q7", (5, -5)),
                ("q7", (6, -6)),
                ("q7", (7, -7)),
                ("q7", (-1, -1)),
                ("q7", (-2, -2)),
                ("q7", (-3, -3)),
                ("q7", (-4, -4)),
                ("q7", (-5, -5)),
                ("q7", (-6, -6)),
                ("q7", (-7, -7)),
                ("q7", (1, 1)),
                ("q7", (2, 2)),
                ("q7", (3, 3)),
                ("q7", (4, 4)),
                ("q7", (5, 5)),
                ("q7", (6, 6)),
                ("q7", (7, 7)),
                ("q7", (-1, 0)),
                ("q7", (-2, 0)),
                ("q7", (-3, 0)),
                ("q7", (-4, 0)),
                ("q7", (-5, 0)),
                ("q7", (-6, 0)),
                ("q7", (-7, 0)),
                ("q7", (1, 0)),
                ("q7", (2, 0)),
                ("q7", (3, 0)),
                ("q7", (4, 0)),
                ("q7", (5, 0)),
                ("q7", (6, 0)),
                ("q7", (7, 0)),
                ("q7", (0, 1)),
                ("q7", (0, 2)),
                ("q7", (0, 3)),
                ("q7", (0, 4)),
                ("q7", (0, 5)),
                ("q7", (0, 6)),
                ("q7", (0, 7)),
                ("q7", (0, -1)),
                ("q7", (0, -2)),
                ("q7", (0, -3)),
                ("q7", (0, -4)),
                ("q7", (0, -5)),
                ("q7", (0, -6)),
                ("q7", (0, -7)),

                ("q8", (-1, 1)),
                ("q8", (-2, 2)),
                ("q8", (-3, 3)),
                ("q8", (-4, 4)),
                ("q8", (-5, 5)),
                ("q8", (-6, 6)),
                ("q8", (-7, 7)),
                ("q8", (1, -1)),
                ("q8", (2, -2)),
                ("q8", (3, -3)),
                ("q8", (4, -4)),
                ("q8", (5, -5)),
                ("q8", (6, -6)),
                ("q8", (7, -7)),
                ("q8", (-1, -1)),
                ("q8", (-2, -2)),
                ("q8", (-3, -3)),
                ("q8", (-4, -4)),
                ("q8", (-5, -5)),
                ("q8", (-6, -6)),
                ("q8", (-7, -7)),
                ("q8", (1, 1)),
                ("q8", (2, 2)),
                ("q8", (3, 3)),
                ("q8", (4, 4)),
                ("q8", (5, 5)),
                ("q8", (6, 6)),
                ("q8", (7, 7)),
                ("q8", (-1, 0)),
                ("q8", (-2, 0)),
                ("q8", (-3, 0)),
                ("q8", (-4, 0)),
                ("q8", (-5, 0)),
                ("q8", (-6, 0)),
                ("q8", (-7, 0)),
                ("q8", (1, 0)),
                ("q8", (2, 0)),
                ("q8", (3, 0)),
                ("q8", (4, 0)),
                ("q8", (5, 0)),
                ("q8", (6, 0)),
                ("q8", (7, 0)),
                ("q8", (0, 1)),
                ("q8", (0, 2)),
                ("q8", (0, 3)),
                ("q8", (0, 4)),
                ("q8", (0, 5)),
                ("q8", (0, 6)),
                ("q8", (0, 7)),
                ("q8", (0, -1)),
                ("q8", (0, -2)),
                ("q8", (0, -3)),
                ("q8", (0, -4)),
                ("q8", (0, -5)),
                ("q8", (0, -6)),
                ("q8", (0, -7)),

                ("q9", (-1, 1)),
                ("q9", (-2, 2)),
                ("q9", (-3, 3)),
                ("q9", (-4, 4)),
                ("q9", (-5, 5)),
                ("q9", (-6, 6)),
                ("q9", (-7, 7)),
                ("q9", (1, -1)),
                ("q9", (2, -2)),
                ("q9", (3, -3)),
                ("q9", (4, -4)),
                ("q9", (5, -5)),
                ("q9", (6, -6)),
                ("q9", (7, -7)),
                ("q9", (-1, -1)),
                ("q9", (-2, -2)),
                ("q9", (-3, -3)),
                ("q9", (-4, -4)),
                ("q9", (-5, -5)),
                ("q9", (-6, -6)),
                ("q9", (-7, -7)),
                ("q9", (1, 1)),
                ("q9", (2, 2)),
                ("q9", (3, 3)),
                ("q9", (4, 4)),
                ("q9", (5, 5)),
                ("q9", (6, 6)),
                ("q9", (7, 7)),
                ("q9", (-1, 0)),
                ("q9", (-2, 0)),
                ("q9", (-3, 0)),
                ("q9", (-4, 0)),
                ("q9", (-5, 0)),
                ("q9", (-6, 0)),
                ("q9", (-7, 0)),
                ("q9", (1, 0)),
                ("q9", (2, 0)),
                ("q9", (3, 0)),
                ("q9", (4, 0)),
                ("q9", (5, 0)),
                ("q9", (6, 0)),
                ("q9", (7, 0)),
                ("q9", (0, 1)),
                ("q9", (0, 2)),
                ("q9", (0, 3)),
                ("q9", (0, 4)),
                ("q9", (0, 5)),
                ("q9", (0, 6)),
                ("q9", (0, 7)),
                ("q9", (0, -1)),
                ("q9", (0, -2)),
                ("q9", (0, -3)),
                ("q9", (0, -4)),
                ("q9", (0, -5)),
                ("q9", (0, -6)),
                ("q9", (0, -7)),

                ("k", (-1, 0)),
                ("k", (-1, -1)),
                ("k", (-1, 1)),
                ("k", (0, -1)),
                ("k", (0, -2)),
                ("k", (0, 1)),
                ("k", (0, 2)),
                ("k", (1, 0)),
                ("k", (1, -1)),
                ("k", (1, 1)),
        ]

        
    def reverse_board_perspective(self, board: List[str]) -> List[str]:
        """
        Returns the Reversed board perspective to that of the opposite player's.

        Parameters:
            - board (List[str]): The chessboard from the white player's perspective.

        Returns:
            - List[str]: The reversed board state, reflecting the opposite player's perspective.
        """
        board = [row[::-1] for row in board[::-1]] # Rotates the board 180 degrees

        for i in range(len(board)):
            for j in range(len(board[i])):
                board[i][j] = self.PIECE_LABELS_OPPONENTS_PERSPECTIVE[board[i][j]] # Changes piece labels to reflect the opponent's perspective

        return board

        





    # Renders the current board on the console
    def render(self):
        for row in self.board:
            print(" ".join("{:<3}".format(cell) for cell in row))
            print("\n")


    # Updates the current board with input board
    def updateBoard(self, newBoard):
        self.board = newBoard

    # Returns the move prediction made by ANN as source and target location arrays
    def getMovePrediction(self):

        switchPlayer = False

        # Repeat unitl valid move is made and instruction is given to switchplayer
        while not switchPlayer:

            print("Board Before Move"+str(self.board))

            # Retrieves predicted Qvalues from ANN and determines the predicted action based on the highest qvalue
            qValues = self.ANN.model.predict(self.preprosessANNInput())
            action = self.actionSpace[np.argmax(qValues)]

            observation, reward, done, info, switchPlayer, startLocation, endLocation = self.step(action)

            print(action)
            print(info)
            print("Board After Move"+str(observation))

        return startLocation, endLocation


    # Resets back to starting position
    def resetBoard(self):
        # Reset the board to its initial state
        self.board = [["or2","on2","ob2","oq","ok","ob1","on1","or1"],
                ["op8","op7","op6","op5","op4","op3","op2","op1"],
                ["_","_","_","_","_","_","_","_"],
                ["_","_","_","_","_","_","_","_"],
                ["_","_","_","_","_","_","_","_"],
                ["_","_","_","_","_","_","_","_"],
                ["p1","p2","p3","p4","p5","p6","p7","p8"],
                ["r1","n1","b1","q2","k","b2","n2","r2"]]


    # Returns translated board in numpy array format for ANN input
    def preprosessANNInput(self):

        translatedBoard = [[self.pieceToInt[piece] for piece in row] for row in self.board]
        return np.array([translatedBoard])


    # Trains ANN based on reward
    def trainANN(self, reward, qValues, actionIndex):

        qValues[0, actionIndex] = reward
        self.ANN.model.fit(self.preprosessANNInput(), qValues, epochs=1, verbose=0)

    # Updates the board with the input moves
    def updateBoardWithMove(self, sourceMove, targetMove):

        piece = self.board[sourceMove[0]][sourceMove[1]]
        self.board[sourceMove[0]][sourceMove[1]] = "_"
        self.board[targetMove[0]][targetMove[1]] = piece
                
    # Returns the current board
    def getCurrentBoard(self):
        return self.board

    # Runs through an action for the RL
    def step(self, action):
        
        # Retrieves Qvalues from ANN and action index of the action being trained
        qValues = self.ANN.model.predict(self.preprosessANNInput())
        actionIndex = self.actionSpace.index(action)
        
        # Determines the index location of the piece taking the action
        piecePresent = False

        for x in range(len(self.board)):
            for y in range(len(self.board[x])):
                if self.board[x][y] == action[0]:
                    sourceLocation = [x,y]
                    targetLocation =  [x+action[1][0],y+action[1][1]]
                    piecePresent = True


        # Checks if the piece being moved is present on the board
        if not piecePresent:

            observation = self.board
            reward = -1000.0
            done = False
            info = {"Invalid Move, Piece is not present on the board"}
            switchPlayer = False
            startLocation = None
            endLocation = None
            

            self.trainANN(reward,qValues, actionIndex)

            return observation, reward, done, info, switchPlayer, startLocation, endLocation

        # Checks if the move is out of range
        if targetLocation[0]>7 or targetLocation[1]>7 or targetLocation[0]<0 or targetLocation[1]<0:

            observation = self.board
            reward = -1000.0
            done = False
            info = {"Invalid Move, Target Location is out of range"}
            switchPlayer = False
            startLocation = None
            endLocation = None

            self.trainANN(reward,qValues, actionIndex)

            return observation, reward, done, info, switchPlayer, startLocation, endLocation


        # Retrieves item present at the target tile
        targetTilePiece = self.board[targetLocation[0]][targetLocation[1]] 

        # Prevents capture of own pieces
        if targetTilePiece in {"k", "q2", "p1", "p2", "p3", "p4","p5","p6","p7","p8","r1","r2","b1","b2","n1","n2"}:

            observation = self.board
            reward = -1000.0
            done = False
            info = {"Invalid Move, Cannot capture piece that belongs to player"}
            switchPlayer = False
            startLocation = None
            endLocation = None

            self.trainANN(reward,qValues, actionIndex)

            return observation, reward, done, info, switchPlayer, startLocation, endLocation
       
        # Prevents castleing outside of king and rook in starting conditions
        if action[0] == "k" and (action[1][1] == 2 or action[1][1] == -2) :

            if not (self.board[7][7] == "r1" or self.board[7][7] == "r2") or sourceLocation != [7,4]:

                observation = self.board
                reward = -1000.0
                done = False
                info = {"Invalid Move, king cannot castle unless King and rook are in starting position"}
                switchPlayer = False
                startLocation = None
                endLocation = None

                self.trainANN(reward,qValues, actionIndex)

                return observation, reward, done, info, switchPlayer, startLocation, endLocation

            if not (self.board[7][0] == "r1" or self.board[7][0] == "r2") or sourceLocation != [7,4]:

                observation = self.board
                reward = -1000.0
                done = False
                info = {"Invalid Move, king cannot castle unless King and rook are in starting position"}
                switchPlayer = False
                startLocation = None
                endLocation = None

                self.trainANN(reward,qValues, actionIndex)

                return observation, reward, done, info, switchPlayer, startLocation, endLocation

        # Pawn invalid move attempts
        if action[0] in {"p1", "p2", "p3", "p4","p5","p6","p7","p8"}:

            if action[1][0] == -2 and sourceLocation[0]!=6:

                observation = self.board
                reward = -1000.0
                done = False
                info = {"Invalid Move, pawn cannot move 2 spaces unless in starting position"}
                switchPlayer = False
                startLocation = None
                endLocation = None

                self.trainANN(reward,qValues, actionIndex)

                return observation, reward, done, info, switchPlayer, startLocation, endLocation
            
            if action[1][1]!=0 and targetTilePiece == "_" and ( not self.en_Passant_Available or self.en_Passant_Location != targetLocation):

                if self.en_Passant_Location != targetLocation:
                    observation = self.board
                    reward = -1000.0
                    done = False
                    info = {"Invalid Move, pawn cannot side ways unless opossing piece is there or enpassant condition is met"}
                    switchPlayer = False
                    startLocation = None
                    endLocation = None

                    self.trainANN(reward,qValues, actionIndex)

                    return observation, reward, done, info, switchPlayer, startLocation, endLocation
            

            if action[1][0] == -2 and sourceLocation[0]==6 and self.board[sourceLocation[0]-1][sourceLocation[1]] != "_":

                observation = self.board
                reward = -1000.0
                done = False
                info = {"Invalid Move, pawn is blocked by other piece in it's path"}
                switchPlayer = False
                startLocation = None
                endLocation = None

                self.trainANN(reward,qValues, actionIndex)

                return observation, reward, done, info, switchPlayer, startLocation, endLocation

            if action[1][0] == -1 and targetTilePiece != "_":

                observation = self.board
                reward = -1000.0
                done = False
                info = {"Invalid Move, pawn is blocked by other piece in it's path"}
                switchPlayer = False
                startLocation = None
                endLocation = None

                self.trainANN(reward,qValues, actionIndex)

                return observation, reward, done, info, switchPlayer, startLocation, endLocation

        # Rook and queen invalid move attempts
        if action[0] in {"r1", "r2", "q2"}:

            
            if action[1][1] > 0:

                for index in range(action[1][1]):

                    if index == 0:
                        continue

                    if self.board[sourceLocation[0]][sourceLocation[1]+index] !=  "_":

                        observation = self.board
                        reward = -1000.0
                        done = False
                        info = {"Invalid Move, rook or queen is blocked by other piece in it's path"}
                        switchPlayer = False
                        startLocation = None
                        endLocation = None

                        self.trainANN(reward,qValues, actionIndex)

                        return observation, reward, done, info, switchPlayer, startLocation, endLocation
                    
            if action[1][1] < 0:

                for index in range(-action[1][1]):

                    if index == 0:
                        continue

                    if self.board[sourceLocation[0]][sourceLocation[1]-index] !=  "_":

                        observation = self.board
                        reward = -1000.0
                        done = False
                        info = {"Invalid Move, rook or queen is blocked by other piece in it's path"}
                        switchPlayer = False
                        startLocation = None
                        endLocation = None

                        self.trainANN(reward,qValues, actionIndex)

                        return observation, reward, done, info, switchPlayer, startLocation, endLocation

            if action[1][0] > 0:

                for index in range(action[1][0]):

                    if index == 0:
                        continue

                    if self.board[sourceLocation[0]+index][sourceLocation[1]] !=  "_":

                        observation = self.board
                        reward = -1000.0
                        done = False
                        info = {"Invalid Move, rook or queen is blocked by other piece in it's path"}
                        switchPlayer = False
                        startLocation = None
                        endLocation = None

                        self.trainANN(reward,qValues, actionIndex)

                        return observation, reward, done, info, switchPlayer, startLocation, endLocation
                    
            if action[1][0] < 0:

                for index in range(-action[1][0]):

                    if index == 0:
                        continue

                    if self.board[sourceLocation[0]-index][sourceLocation[1]-index] !=  "_":

                        observation = self.board
                        reward = -1000.0
                        done = False
                        info = {"Invalid Move, rook or queen is blocked by other piece in it's path"}
                        switchPlayer = False
                        startLocation = None
                        endLocation = None

                        self.trainANN(reward,qValues, actionIndex)

                        return observation, reward, done, info, switchPlayer, startLocation, endLocation


        # bishop and queen invalid move attempts
        if action[0] in {"b1", "b2", "q2"}:

            if action[1][0] > 0 and action[1][1] > 0:

                for index in range(action[1][0]):

                    if index == 0:
                        continue

                    if self.board[sourceLocation[0]+index][sourceLocation[1]+index] !=  "_":

                        observation = self.board
                        reward = -1000.0
                        done = False
                        info = {"Invalid Move, bishop or queen is blocked by other piece in it's path"}
                        switchPlayer = False
                        startLocation = None
                        endLocation = None

                        self.trainANN(reward,qValues, actionIndex)

                        return observation, reward, done, info, switchPlayer, startLocation, endLocation
                    

            if action[1][0] > 0 and action[1][1] < 0:

                for index in range(action[1][0]):

                    if index == 0:
                        continue

                    if self.board[sourceLocation[0]+index][sourceLocation[1]-index] !=  "_":

                        observation = self.board
                        reward = -1000.0
                        done = False
                        info = {"Invalid Move, bishop or queen is blocked by other piece in it's path"}
                        switchPlayer = False
                        startLocation = None
                        endLocation = None

                        self.trainANN(reward,qValues, actionIndex)

                        return observation, reward, done, info, switchPlayer, startLocation, endLocation

            if action[1][0] < 0 and action[1][1] > 0:

                for index in range(-action[1][0]):

                    if index == 0:
                        continue

                    if self.board[sourceLocation[0]-index][sourceLocation[1]+index] !=  "_":

                        observation = self.board
                        reward = -1000.0
                        done = False
                        info = {"Invalid Move, bishop or queen is blocked by other piece in it's path"}
                        switchPlayer = False
                        startLocation = None
                        endLocation = None

                        self.trainANN(reward,qValues, actionIndex)

                        return observation, reward, done, info, switchPlayer, startLocation, endLocation

            if action[1][0] < 0 and action[1][1] < 0:

                for index in range(-action[1][0]):

                    if index == 0:
                        continue

                    if self.board[sourceLocation[0]-index][sourceLocation[1]-index] !=  "_":

                        observation = self.board
                        reward = -1000.0
                        done = False
                        info = {"Invalid Move, bishop or queen is blocked by other piece in it's path"}
                        switchPlayer = False
                        startLocation = None
                        endLocation = None

                        self.trainANN(reward,qValues, actionIndex)

                        return observation, reward, done, info, switchPlayer, startLocation, endLocation


        # Valid Castling Condition
        if action[0] == "k":

            if action[1][1] == 2:

                castled_Rook = self.board[7][7]

                self.board[targetLocation[0]][targetLocation[1]] = action[0]
                self.board[sourceLocation[0]][sourceLocation[1]] = "_"
                self.board[7][7] = "_"
                self.board[7][5] = castled_Rook

                observation = self.board
                reward = 100.0
                done = False
                info = {"Valid move, castling with right rook"}
                switchPlayer = True
                startLocation = sourceLocation
                endLocation = targetLocation

                self.en_Passant_Available = False
                self.en_Passant_Location = None

                # Shows status of successful move attempts being trained into ANN
                print("Board: "+str(self.board))
                print("Action: "+str(action))
                print("Source Location: " + str(sourceLocation))
                print("Target Location: " + str(targetLocation))
                print("Source Tile: " + str(self.board[sourceLocation[0]][sourceLocation[1]]))
                print("Target Tile: " + str(self.board[targetLocation[0]][targetLocation[1]]))

                self.trainANN( reward, qValues, actionIndex)

                return observation, reward, done, info, switchPlayer, startLocation, endLocation

            if action[1][1] == -2:

                castled_Rook = self.board[7][0]

                self.board[targetLocation[0]][targetLocation[1]] = action[0]
                self.board[sourceLocation[0]][sourceLocation[1]] = "_"
                self.board[7][0] = "_"
                self.board[7][3] = castled_Rook

                observation = self.board
                reward = 100.0
                done = False
                info = {"Valid move, castling with left rook"}
                switchPlayer = True
                startLocation = sourceLocation
                endLocation = targetLocation

                self.en_Passant_Available = False
                self.en_Passant_Location = None

                # Shows status of successful move attempts being trained into ANN
                print("Board: "+str(self.board))
                print("Action: "+str(action))
                print("Source Location: " + str(sourceLocation))
                print("Target Location: " + str(targetLocation))
                print("Source Tile: " + str(self.board[sourceLocation[0]][sourceLocation[1]]))
                print("Target Tile: " + str(self.board[targetLocation[0]][targetLocation[1]]))

                self.trainANN( reward, qValues, actionIndex)

                return observation, reward, done, info, switchPlayer, startLocation, endLocation


        # Valid pawn starting move 2 spaces activating en passant conditional
        if action[0] in {"p1", "p2", "p3", "p4","p5","p6","p7","p8"} and action[1][0] == -2:

            self.board[targetLocation[0]][targetLocation[1]] = action[0]
            self.board[sourceLocation[0]][sourceLocation[1]] = "_"
            observation = self.board
            reward = -1.0
            done = False
            info = {"Valid move made, pawn moved two spaces from starting position, activating En Passant condition"}
            switchPlayer = True
            startLocation = sourceLocation
            endLocation = targetLocation

            self.en_Passant_Available = True
            # This will be there target location for the opponent player
            self.en_Passant_Location = [2,abs(7-targetLocation[1])]


            # Shows status of successful move attempts being trained into ANN
            print("Board: "+str(self.board))
            print("Action: "+str(action))
            print("Source Location: " + str(sourceLocation))
            print("Target Location: " + str(targetLocation))
            print("Source Tile: " + str(self.board[sourceLocation[0]][sourceLocation[1]]))
            print("Target Tile: " + str(self.board[targetLocation[0]][targetLocation[1]]))

            self.trainANN( reward, qValues, actionIndex)

            return observation, reward, done, info, switchPlayer, startLocation, endLocation




        # Valid Pawn promotion
        if action[0] in {"p1", "p2", "p3", "p4","p5","p6","p7","p8"} and targetLocation[0] == 0:
            
            self.board[targetLocation[0]][targetLocation[1]] = action[0]
            self.board[sourceLocation[0]][sourceLocation[1]] = "_"
            observation = self.board
            reward = -1.0
            done = False
            info = {"Valid move made, pawn moved two spaces from starting position, activating En Passant condition"}
            switchPlayer = True
            startLocation = sourceLocation
            endLocation = targetLocation

            self.en_Passant_Available = True
            # This will be there target location for the opponent player
            self.en_Passant_Location = [2,abs(7-targetLocation[1])]


            # Shows status of successful move attempts being trained into ANN
            print("Board: "+str(self.board))
            print("Action: "+str(action))
            print("Source Location: " + str(sourceLocation))
            print("Target Location: " + str(targetLocation))
            print("Source Tile: " + str(self.board[sourceLocation[0]][sourceLocation[1]]))
            print("Target Tile: " + str(self.board[targetLocation[0]][targetLocation[1]]))

            self.trainANN( reward, qValues, actionIndex)

            return observation, reward, done, info, switchPlayer, startLocation, endLocation

        

        # If valid move and target tile is empty
        if targetTilePiece == "_":

            self.board[targetLocation[0]][targetLocation[1]] = action[0]
            self.board[sourceLocation[0]][sourceLocation[1]] = "_"
            observation = self.board
            reward = -1.0
            done = False
            info = {"Valid move made onto empty tile"}
            switchPlayer = True
            startLocation = sourceLocation
            endLocation = targetLocation
            
        # If valid move and target tile is an opponent pawn
        if targetTilePiece in {"op1", "op2", "op3", "op4","op5","op6","op7","op8"}:

            self.board[targetLocation[0]][targetLocation[1]] = action[0]
            self.board[sourceLocation[0]][sourceLocation[1]] = "_"
            observation = self.board
            reward = 10.0
            done = False
            info = {"Valid move made, opponent pawn taken"}
            switchPlayer = True
            startLocation = sourceLocation
            endLocation = targetLocation
            

        # If valid move and target tile is an opponent knight
        if targetTilePiece == "on1" or targetTilePiece == "on2":

            self.board[targetLocation[0]][targetLocation[1]] = action[0]
            self.board[sourceLocation[0]][sourceLocation[1]] = "_"
            observation = self.board
            reward = 30.0
            done = False
            info = {"Valid move made, opponent knight taken"}
            switchPlayer = True
            startLocation = sourceLocation
            endLocation = targetLocation
            
        
        # If valid move and target tile is an opponent bishop
        if targetTilePiece == "ob1" or targetTilePiece == "ob2":

            self.board[targetLocation[0]][targetLocation[1]] = action[0]
            self.board[sourceLocation[0]][sourceLocation[1]] = "_"
            observation = self.board
            reward = 30.0
            done = False
            info = {"Valid move made, opponent bishop taken"}
            switchPlayer = True
            startLocation = sourceLocation
            endLocation = targetLocation
            
        
        # If valid move and target tile is an opponent rook
        if targetTilePiece == "or1" or targetTilePiece == "or2":

            self.board[targetLocation[0]][targetLocation[1]] = action[0]
            self.board[sourceLocation[0]][sourceLocation[1]] = "_"
            observation = self.board
            reward = 50.0
            done = False
            info = {"Valid move made, opponent rook taken"}
            switchPlayer = True
            startLocation = sourceLocation
            endLocation = targetLocation
            
        
        # If valid move and target tile is an opponent queen
        if targetTilePiece == "oq":

            self.board[targetLocation[0]][targetLocation[1]] = action[0]
            self.board[sourceLocation[0]][sourceLocation[1]] = "_"
            observation = self.board
            reward = 90.0
            done = False
            info = {"Valid move made, opponent queen taken"}
            switchPlayer = True
            startLocation = sourceLocation
            endLocation = targetLocation

        if targetTilePiece == "ok":

            self.board[targetLocation[0]][targetLocation[1]] = action[0]
            self.board[sourceLocation[0]][sourceLocation[1]] = "_"
            observation = self.board
            reward = 100000.0
            done = True
            info = {"Valid move made, opponent King taken"}
            switchPlayer = True
            startLocation = sourceLocation
            endLocation = targetLocation

        self.en_Passant_Available = False
        self.en_Passant_Location = None

        # Shows status of successful move attempts being trained into ANN
        print("Board: "+str(self.board))
        print("Action: "+str(action))
        print("Source Location: " + str(sourceLocation))
        print("Target Location: " + str(targetLocation))
        print("Source Tile: " + str(self.board[sourceLocation[0]][sourceLocation[1]]))
        print("Target Tile: " + str(self.board[targetLocation[0]][targetLocation[1]]))

        self.trainANN( reward, qValues, actionIndex)

        return observation, reward, done, info, switchPlayer, startLocation, endLocation
    
###############################################################################################################################################################